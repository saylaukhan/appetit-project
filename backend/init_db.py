#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.database import create_db_and_tables, get_db_session
from app.models.menu import Category, Dish, Addon, VariantGroup, Variant
from sqlalchemy.ext.asyncio import AsyncSession


async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    await create_db_and_tables()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async for db in get_db_session():
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = [
                Category(id=1, name="–ö–æ–º–±–æ", description="–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", is_active=True, sort_order=1),
                Category(id=2, name="–ë–ª—é–¥–∞", description="–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞", is_active=True, sort_order=2),
                Category(id=3, name="–ó–∞–∫—É—Å–∫–∏", description="–õ–µ–≥–∫–∏–µ –∑–∞–∫—É—Å–∫–∏", is_active=True, sort_order=3),
                Category(id=4, name="–°–æ—É—Å—ã", description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ—É—Å—ã", is_active=True, sort_order=4),
                Category(id=5, name="–ù–∞–ø–∏—Ç–∫–∏", description="–ü—Ä–æ—Ö–ª–∞–¥–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏", is_active=True, sort_order=5),
            ]
            
            for category in categories:
                db.add(category)
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–±–∞–≤–∫–∏
            addons = [
                Addon(name="–°–æ—É—Å –°—ã—Ä–Ω—ã–π", price=240, category="–°–æ—É—Å—ã", is_active=True),
                Addon(name="–°–æ—É—Å –û—Å—Ç—Ä—ã–π", price=240, category="–°–æ—É—Å—ã", is_active=True),
                Addon(name="–°–æ—É—Å –ß–µ—Å–Ω–æ—á–Ω—ã–π", price=240, category="–°–æ—É—Å—ã", is_active=True),
                Addon(name="–°–æ—É—Å –ë–∞—Ä–±–µ–∫—é", price=240, category="–°–æ—É—Å—ã", is_active=True),
                Addon(name="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—ã—Ä", price=300, category="–î–æ–±–∞–≤–∫–∏", is_active=True),
                Addon(name="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–ΩÔøΩÔøΩ–µ –º—è—Å–æ", price=500, category="–î–æ–±–∞–≤–∫–∏", is_active=True),
                Addon(name="–û–≤–æ—â–∏", price=200, category="–î–æ–±–∞–≤–∫–∏", is_active=True),
                Addon(name="–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏", price=350, category="–î–æ–±–∞–≤–∫–∏", is_active=True),
            ]
            
            for addon in addons:
                db.add(addon)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            variant_groups = [
                VariantGroup(name="–†–∞–∑–º–µ—Ä", is_required=True, is_multiple=False, sort_order=1),
                VariantGroup(name="–¢–∏–ø —Ç–µ—Å—Ç–∞", is_required=False, is_multiple=False, sort_order=2),
                VariantGroup(name="–û—Å—Ç—Ä–æ—Ç–∞", is_required=False, is_multiple=False, sort_order=3),
            ]
            
            for group in variant_groups:
                db.add(group)
            
            await db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è —Å–≤—è–∑–µ–π
            
            # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
            variants = [
                # –†–∞–∑–º–µ—Ä—ã
                Variant(name="–ú–∞–ª–µ–Ω—å–∫–∞—è", price=0, group_id=1, is_default=False, sort_order=1),
                Variant(name="–°—Ä–µ–¥–Ω—è—è", price=300, group_id=1, is_default=True, sort_order=2),
                Variant(name="–ë–æ–ª—å—à–∞—è", price=600, group_id=1, is_default=False, sort_order=3),
                
                # –¢–∏–ø —Ç–µ—Å—Ç–∞
                Variant(name="–¢–æ–Ω–∫–∏–π –ª–∞–≤–∞—à", price=0, group_id=2, is_default=True, sort_order=1),
                Variant(name="–¢–æ–ª—Å—Ç—ã–π –ª–∞–≤–∞—à", price=100, group_id=2, is_default=False, sort_order=2),
                Variant(name="–ü–∏—Ç–∞", price=150, group_id=2, is_default=False, sort_order=3),
                
                # –û—Å—Ç—Ä–æ—Ç–∞
                Variant(name="–ù–µ –æ—Å—Ç—Ä–∞—è", price=0, group_id=3, is_default=True, sort_order=1),
                Variant(name="–°–ª–∞–±–æ –æ—Å—Ç—Ä–∞—è", price=0, group_id=3, is_default=False, sort_order=2),
                Variant(name="–û—Å—Ç—Ä–∞—è", price=0, group_id=3, is_default=False, sort_order=3),
                Variant(name="–û—á–µ–Ω—å –æ—Å—Ç—Ä–∞—è", price=0, group_id=3, is_default=False, sort_order=4),
            ]
            
            for variant in variants:
                db.add(variant)
            
            # –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–∞
            dishes = [
                Dish(
                    name="–ö–æ–º–±–æ –¥–ª—è –û–î–ù–û–ì–û",
                    description="–§–∏—Ä–º–µ–Ω–Ω–∞—è —à–∞—É—Ä–º–∞, –∫–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏ –∏ –∞–π—Ä–∞–Ω.",
                    price=2490,
                    category_id=1,
                    is_available=True,
                    is_popular=False,
                    sort_order=1
                ),
                Dish(
                    name="–§–∏—Ä–º–µ–Ω–Ω–∞—è –°—Ä–µ–¥–Ω—è—è —à–∞—É—Ä–º–∞",
                    description="–¢–æ–Ω–∫–∏–π –ª–∞–≤–∞—à, —Å–æ—á–Ω—ã–µ –∫—É—Å–æ—á–∫–∏ –≥–æ–≤—è–¥–∏–Ω—ã, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏, –ª—É–∫, –ø–æ–º–∏–¥–æ—Ä, –±–µ–ª—ã–π —Å–æ—É—Å.",
                    price=1990,
                    category_id=2,
                    is_available=True,
                    is_popular=False,
                    sort_order=1
                ),
                Dish(
                    name="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –°—Ä–µ–¥–Ω—è—è —à–∞—É—Ä–º–∞",
                    description="–¢–æ–Ω–∫–∏–π –ª–∞–≤–∞—à, —Å–æ—á–Ω—ã–µ –∫—É—Å–æ—á–∫–∏ –≥–æ–≤—è–¥–∏–Ω—ã, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏, –ª—É–∫, –ø–æ–º–∏–¥–æ—Ä, –∫—Ä–∞—Å–Ω—ã–π —Å–æ—É—Å, –±–µ–ª—ã–π —Å–æ—É—Å.",
                    price=1690,
                    category_id=2,
                    is_available=True,
                    is_popular=True,
                    sort_order=2
                ),
                Dish(
                    name="–®–µ–∫–µ—Ä",
                    description="–°–ª–∞–¥–∫–∏–µ –ø–∞–ª–æ—á–∫–∏ –∏–∑ —Ç–µ—Å—Ç–∞, –æ–±–∂–∞—Ä–µ–Ω–Ω—ã–µ –≤–æ —Ñ—Ä–∏—Ç—é—Ä–µ: —Ö—Ä—É—Å—Ç—è—â–∏–µ —Å–Ω–∞—Ä—É–∂–∏ –∏ –Ω–µ–∂–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏",
                    price=400,
                    category_id=3,
                    is_available=True,
                    is_popular=False,
                    sort_order=1
                ),
                Dish(
                    name="–°–æ—É—Å –°—ã—Ä–Ω—ã–π 30–≥",
                    description="–ù–µ–∂–Ω—ã–π —Å—ã—Ä–Ω—ã–π —Å–æ—É—Å",
                    price=240,
                    category_id=4,
                    is_available=True,
                    is_popular=False,
                    sort_order=1
                ),
                Dish(
                    name="–ü–µ–ø—Å–∏ 0,5–ª",
                    description="–ü—Ä–æ—Ö–ª–∞–¥–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫",
                    price=640,
                    category_id=5,
                    is_available=True,
                    is_popular=False,
                    sort_order=1
                ),
            ]
            
            for dish in dishes:
                db.add(dish)
            
            await db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –±–ª—é–¥
            
            # –°–≤—è–∑—ã–≤–∞–µ–º –±–ª—é–¥–∞ —Å –¥–æ–±–∞–≤–∫–∞–º–∏
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            dish_combo = next(d for d in dishes if d.name == "–ö–æ–º–±–æ –¥–ª—è –û–î–ù–û–ì–û")
            dish_firm = next(d for d in dishes if d.name == "–§–∏—Ä–º–µ–Ω–Ω–∞—è –°—Ä–µ–¥–Ω—è—è —à–∞—É—Ä–º–∞")
            dish_classic = next(d for d in dishes if d.name == "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –°—Ä–µ–¥–Ω—è—è —à–∞—É—Ä–º–∞")
            
            # –°–≤—è–∑—ã–≤–∞–µ–º —Å –¥–æ–±–∞–≤–∫–∞–º–∏
            dish_combo.addons = addons[:4]  # –í—Å–µ —Å–æ—É—Å—ã
            dish_firm.addons = addons  # –í—Å–µ –¥–æ–±–∞–≤–∫–∏
            dish_classic.addons = addons[:7]  # –í—Å–µ –∫—Ä–æ–º–µ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è —Ñ—Ä–∏
            
            # –°–≤—è–∑—ã–≤–∞–µ–º —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ —à–∞—É—Ä–º—É)
            dish_firm.variants = variants[:6]  # –†–∞–∑–º–µ—Ä –∏ —Ç–∏–ø —Ç–µ—Å—Ç–∞
            dish_classic.variants = variants  # –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            
            await db.commit()
            print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏ÔøΩÔøΩ—Ç–∏–∫—É
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ:")
            print(f"  - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
            print(f"  - –î–æ–±–∞–≤–æ–∫: {len(addons)}")
            print(f"  - –ì—Ä—É–ø–ø –≤–∞—Ä–∏ÔøΩÔøΩ–Ω—Ç–æ–≤: {len(variant_groups)}")
            print(f"  - –í–∞—Ä–∏–∞–Ω—Ç–æ–≤: {len(variants)}")
            print(f"  - –ë–ª—é–¥: {len(dishes)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            await db.rollback()
            raise
        
        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö APPETIT...")
    
    try:
        await init_database()
        print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        print("üéâ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä: python main.py")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)