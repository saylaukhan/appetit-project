#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º –∑–∞–ø—É—Å–∫–∞ –±–µ–∫–µ–Ω–¥–∞
"""
import sys
import traceback
import asyncio

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        print("  ‚úì –ò–º–ø–æ—Ä—Ç FastAPI...")
        import fastapi
        
        print("  ‚úì –ò–º–ø–æ—Ä—Ç Uvicorn...")
        import uvicorn
        
        print("  ‚úì –ò–º–ø–æ—Ä—Ç SQLAlchemy...")
        import sqlalchemy
        
        print("  ‚úì –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        from app.core.config import settings
        print(f"    - DEBUG: {settings.DEBUG}")
        print(f"    - DATABASE_URL: {settings.DATABASE_URL}")
        
        print("  ‚úì –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        from app.core.database import engine, Base
        
        print("  ‚úì –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π...")
        from app.models import User, Category, Dish, Order
        
        print("  ‚úì –ò–º–ø–æ—Ä—Ç API —Ä–æ—ÉÔøΩÔøΩ–µ—Ä–æ–≤...")
        from app.api.routes import api_router
        
        print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        traceback.print_exc()
        return False

async def test_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from app.core.database import engine, Base
        
        print("  ‚úì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        async with engine.begin() as conn:
            print("  ‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!")
            
            print("  ‚úì –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
            await conn.run_sync(Base.metadata.create_all)
            print("  ‚úì –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!")
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        traceback.print_exc()
        return False

def test_app_creation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂ÔøΩÔøΩ–Ω–∏—è...")
    
    try:
        from main import create_application
        
        print("  ‚úì –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        app = create_application()
        
        print(f"  ‚úì –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {app}")
        print(f"  ‚úì –ù–∞–∑–≤–∞–Ω–∏–µ: {app.title}")
        print(f"  ‚úì –í–µ—Ä—Å–∏—è: {app.version}")
        
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ APPETIT Backend\n")
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç—ã
    if not test_imports():
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞")
        return False
    
    # –¢–µ—Å—Ç 2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    if not await test_database():
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –ë–î")
        return False
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if not test_app_creation():
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        return False
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–µ–∫–µ–Ω–¥ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
    return True

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        if result:
            print("\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            print("\nüí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        sys.exit(1)