#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.database import create_db_and_tables, get_db_session
from app.models.menu import Category, Dish, Addon
from app.services.menu import MenuService
from app.schemas.menu import DishCreateRequest, AddonCreateRequest
from sqlalchemy.ext.asyncio import AsyncSession


async def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    await create_db_and_tables()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async for db in get_db_session():
        menu_service = MenuService(db)
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories_data = [
                {"id": 1, "name": "–ö–æ–º–±–æ", "is_active": True, "sort_order": 1},
                {"id": 2, "name": "–ë–ª—é–¥–∞", "is_active": True, "sort_order": 2},
                {"id": 3, "name": "–ó–∞–∫—É—Å–∫–∏", "is_active": True, "sort_order": 3},
                {"id": 4, "name": "–°–æ—É—Å—ã", "is_active": True, "sort_order": 4},
                {"id": 5, "name": "–ù–∞–ø–∏—Ç–∫–∏", "is_active": True, "sort_order": 5},
            ]
            
            for cat_data in categories_data:
                category = Category(**cat_data)
                db.add(category)
            
            await db.commit()
            print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–±–∞–≤–∫–∏
            addons_data = [
                {"name": "–°–æ—É—Å –°—ã—Ä–Ω—ã–π", "price": 240, "category": "–°–æ—É—Å—ã"},
                {"name": "–°–æ—É—Å –û—Å—Ç—Ä—ã–π", "price": 240, "category": "–°–æ—É—Å—ã"},
                {"name": "–°–æ—É—Å –ß–µ—Å–Ω–æ—á–Ω—ã–π", "price": 240, "category": "–°–æ—É—Å—ã"},
                {"name": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—ã—Ä", "price": 300, "category": "–î–æ–±–∞–≤–∫–∏"},
                {"name": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º—è—Å–æ", "price": 500, "category": "–î–æ–±–∞–≤–∫–∏"},
                {"name": "–û–≤–æ—â–∏", "price": 200, "category": "–î–æ–±–∞–≤–∫–∏"},
            ]
            
            created_addons = []
            for addon_data in addons_data:
                addon_request = AddonCreateRequest(**addon_data)
                addon = await menu_service.create_addon(addon_request)
                created_addons.append(addon)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–æ–±–∞–≤–∫–∞: {addon.name} (ID: {addon.id})")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–ª—é–¥–∞
            dishes_data = [
                {
                    "name": "–ö–æ–º–±–æ –¥–ª—è –û–î–ù–û–ì–û",
                    "description": "–§–∏—Ä–º–µ–Ω–Ω–∞—è —à–∞—É—Ä–º–∞, –∫–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏ –∏ –∞–π—Ä–∞–Ω.",
                    "price": 2490,
                    "category_id": 1,
                    "is_available": True,
                    "is_popular": False,
                    "addon_ids": [1, 2, 3]  # –°–æ—É—Å—ã
                },
                {
                    "name": "–§–∏—Ä–º–µ–Ω–Ω–∞—è –°—Ä–µ–¥–Ω—è—è —à–∞—É—Ä–º–∞",
                    "description": "–¢–æ–Ω–∫–∏–π –ª–∞–≤–∞—à, —Å–æ—á–Ω—ã–µ –∫—É—Å–æ—á–∫–∏ –≥–æ–≤—è–¥–∏–Ω—ã, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏, –ª—É–∫, –ø–æ–º–∏–¥–æ—Ä, –±–µ–ª—ã–π —Å–æ—É—Å.",
                    "price": 1990,
                    "category_id": 2,
                    "is_available": True,
                    "is_popular": False,
                    "addon_ids": [1, 2, 3, 4, 5, 6]  # –í—Å–µ –¥–æ–±–∞–≤–∫–∏
                },
                {
                    "name": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –°—Ä–µ–¥–Ω—è—è —à–∞—É—Ä–º–∞",
                    "description": "–¢–æ–Ω–∫–∏–π –ª–∞–≤–∞—à, —Å–æ—á–Ω—ã–µ –∫—É—Å–æ—á–∫–∏ –≥–æ–≤—è–¥–∏–Ω—ã, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏, –ª—É–∫, –ø–æ–º–∏–¥–æ—Ä, –∫—Ä–∞—Å–Ω—ã–π —Å–æ—É—Å, –±–µ–ª—ã–π —Å–æ—É—Å.",
                    "price": 1690,
                    "category_id": 2,
                    "is_available": True,
                    "is_popular": True,
                    "addon_ids": [1, 2, 3, 4, 5]  # –ü–æ—á—Ç–∏ –≤—Å–µ –¥–æ–±–∞–≤–∫–∏
                }
            ]
            
            for dish_data in dishes_data:
                dish_request = DishCreateRequest(**dish_data)
                dish = await menu_service.create_dish(dish_request)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –±–ª—é–¥–æ: {dish.name} (ID: {dish.id}) —Å {len(dish_data.get('addon_ids', []))} –¥–æ–±–∞–≤–∫–∞–º–∏")
            
            print("üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏ÔøΩÔøΩ–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            await db.rollback()
            raise
        
        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏


async def test_addon_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–æ–±–∞–≤–∫–∞–º–∏."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–æ–±–∞–≤–∫–∞–º–∏...")
    
    async for db in get_db_session():
        menu_service = MenuService(db)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–±–∞–≤–∫–∏
            addons = await menu_service.get_addons(show_all=True)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(addons)} –¥–æ–±–∞–≤–æ–∫")
            
            for addon in addons:
                print(f"  - {addon.name}: {addon.price}‚Ç∏ ({addon.category})")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–ª—é–¥–∞
            dishes = await menu_service.get_dishes(show_all=True)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(dishes)} –±–ª—é–¥")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ —Å –¥–æ–±–∞–≤–∫–∞–º–∏
            if dishes:
                dish = dishes[0]
                print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞: {dish.name}")
                
                # –ü–æ–ª—É—á–∞–µÔøΩÔøΩ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ
                dish_detail = await menu_service.get_dish_by_id(dish.id)
                if dish_detail:
                    current_addons = dish_detail.get('addons', [])
                    print(f"  –¢–µ–∫—É—â–∏–µ –¥–æ–±–∞–≤–∫–∏: {len(current_addons)}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–ª—é–¥–æ —Å –Ω–æ–≤—ã–º–∏ –¥–æ–±–∞–≤–∫–∞–º–∏
                    from app.schemas.menu import DishUpdateRequest
                    update_data = DishUpdateRequest(
                        addon_ids=[1, 2]  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –¥–≤–µ –¥–æ–±–∞–≤–∫–∏
                    )
                    
                    updated_dish = await menu_service.update_dish(dish.id, update_data)
                    if updated_dish:
                        print("‚úÖ –ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–±–∞–≤–∫–∏
                        updated_detail = await menu_service.get_dish_by_id(dish.id)
                        if updated_detail:
                            new_addons = updated_detail.get('addons', [])
                            print(f"  –ù–æ–≤—ã–µ –¥–æ–±–∞–≤–∫–∏: {len(new_addons)}")
                            for addon in new_addons:
                                print(f"    - {addon.name}: {addon.price}‚Ç∏")
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–ª—é–¥–æ")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –±–ª—é–¥–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()
        
        break


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        await create_test_data()
        await test_addon_operations()
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)