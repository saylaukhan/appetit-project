#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –±–∞–Ω–Ω–µ—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö APPETIT.
"""

import asyncio
import sys
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(str(Path(__file__).parent))

from sqlalchemy.ext.asyncio import AsyncSession
from app.core.database import engine, Base
from app.models.banner import Banner


async def create_sample_banners():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –±–∞–Ω–Ω–µ—Ä–æ–≤."""
    
    async with AsyncSession(engine) as session:
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            async with engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –±–∞–Ω–Ω–µ—Ä—ã
            from sqlalchemy import select, func
            count_query = select(func.count(Banner.id))
            result = await session.execute(count_query)
            existing_banners = result.scalar()
            
            if existing_banners > 0:
                print(f"‚ÑπÔ∏è  –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {existing_banners} –±–∞–Ω–Ω–µ—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤.")
                return
            
            # –ü—Ä–∏–º–µ—Ä—ã –±–∞–Ω–Ω–µ—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            sample_banners = [
                {
                    "title": "–ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ 1+1",
                    "description": "–ù–∞ —Ñ–∏—Ä–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥–Ω—é—é —à–∞—É—Ä–º—É",
                    "image": "/static/banners/tuesday-promo.jpg",
                    "link": "/menu/shawarma",
                    "position": "main",
                    "sort_order": 1,
                    "is_active": True
                },
                {
                    "title": "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –º–æ—à–µ–Ω–Ω–∏–∫–∏!",
                    "description": "–í –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É—á–∞—Å—Ç–∏–ª–∏—Å—å —Å–ª—É—á–∞–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –æ—Ç –Ω–∞—à–µ–≥–æ –∏–º–µ–Ω–∏",
                    "image": "/static/banners/warning.jpg",
                    "link": None,
                    "position": "popup",
                    "sort_order": 1,
                    "is_active": True
                },
                {
                    "title": "–ù–∞–º 10 –ª–µ—Ç",
                    "description": "–ü—Ä–∞–∑–¥–Ω—É–µ–º —é–±–∏–ª–µ–π –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏!",
                    "image": "/static/banners/anniversary.jpg",
                    "link": "/promo/anniversary",
                    "position": "hero",
                    "sort_order": 1,
                    "is_active": True,
                    "show_from": datetime.now(),
                    "show_until": datetime.now() + timedelta(days=30)
                },
                {
                    "title": "–ù–æ–≤–∏–Ω–∫–∞ –ß–∞–∫-—á–∞–∫",
                    "description": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à –Ω–æ–≤—ã–π –¥–µ—Å–µ—Ä—Ç",
                    "image": "/static/banners/chak-chak.jpg",
                    "link": "/menu/desserts/chak-chak",
                    "position": "featured",
                    "sort_order": 2,
                    "is_active": True
                },
                {
                    "title": "–ì–æ—Ç–æ–≤–∏–º –±–µ–∑ —Å–≤–∏–Ω–∏–Ω—ã",
                    "description": "–í—Å–µ –Ω–∞—à–∏ –±–ª—é–¥–∞ –±–µ–∑ —Å–≤–∏–Ω–∏–Ω—ã",
                    "image": "/static/banners/halal.jpg",
                    "link": "/about/halal",
                    "position": "category",
                    "sort_order": 1,
                    "is_active": True
                },
                {
                    "title": "–í –Ω–∞–ø–∏—Ç–∫–∞—Ö –Ω–æ–≤–∏–Ω–∫–∏",
                    "description": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à–∏ –Ω–æ–≤—ã–µ –Ω–∞–ø–∏—Ç–∫–∏",
                    "image": "/static/banners/drinks.jpg",
                    "link": "/menu/drinks",
                    "position": "featured",
                    "sort_order": 3,
                    "is_active": True
                },
                {
                    "title": "–ù–æ–≤–∏–Ω–∫–∞: –î–∞–ª–∞ –ë–∞—Ä–±–µ–∫—é",
                    "description": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à–µ –Ω–æ–≤–æ–µ –±–ª—é–¥–æ",
                    "image": "/static/banners/dalla-bbq.jpg",
                    "link": "/menu/meat/dalla-bbq",
                    "position": "featured",
                    "sort_order": 4,
                    "is_active": True
                },
                {
                    "title": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
                    "description": "–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 3000‚Ç∏",
                    "image": "/static/banners/free-delivery.jpg",
                    "link": "/delivery-info",
                    "position": "cart",
                    "sort_order": 1,
                    "is_active": True
                }
            ]
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–Ω–Ω–µ—Ä—ã
            for banner_data in sample_banners:
                banner = Banner(**banner_data)
                session.add(banner)
            
            await session.commit()
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(sample_banners)} –ø—Ä–∏–º–µ—Ä–æ–≤ –±–∞–Ω–Ω–µ—Ä–æ–≤:")
            for banner_data in sample_banners:
                print(f"   ‚Ä¢ {banner_data['title']} (–ø–æ–∑–∏—Ü–∏—è: {banner_data['position']})")
            
            print(f"\nüåê –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API:")
            print(f"   ‚Ä¢ GET /api/v1/marketing/banners - –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã")
            print(f"   ‚Ä¢ GET /api/v1/marketing/banners/main - –±–∞–Ω–Ω–µ—Ä—ã –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            print(f"   ‚Ä¢ GET /api/v1/admin/marketing - –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤: {e}")
            await session.rollback()
            raise
        finally:
            await session.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –±–∞–Ω–Ω–µ—Ä–æ–≤ –¥–ª—è APPETIT...")
    
    try:
        await create_sample_banners()
        print("\nüéâ –ü—Ä–∏–º–µ—Ä—ã –±–∞–Ω–Ω–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        await engine.dispose()
    
    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)