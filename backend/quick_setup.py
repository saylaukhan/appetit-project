#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
"""
import asyncio
import sys
from datetime import datetime, timedelta

try:
    from app.core.database import get_db_session, engine
    from app.models import Base, PromoCode, DiscountType
    from sqlalchemy.ext.asyncio import AsyncSession
    from sqlalchemy import select, text
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ backend")
    sys.exit(1)

async def setup_everything():
    """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤...")
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        async for db in get_db_session():
            try:
                # –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await db.execute(text("SELECT 1"))
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
                result = await db.execute(select(PromoCode))
                existing_codes = result.scalars().all()
                
                if existing_codes:
                    print(f"‚ÑπÔ∏è  –ù–∞–π–¥–µ–Ω–æ {len(existing_codes)} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:")
                    for code in existing_codes:
                        status = "‚úÖ" if code.is_active else "‚ùå"
                        print(f"   {status} {code.code}: {code.name}")
                else:
                    print("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã...")
                    
                    # 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
                    test_codes = [
                        PromoCode(
                            code="WELCOME10",
                            name="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞",
                            description="10% —Å–∫–∏–¥–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
                            discount_type=DiscountType.PERCENTAGE,
                            discount_value=10,
                            min_order_amount=2000,
                            max_discount_amount=500,
                            usage_limit=100,
                            usage_limit_per_user=1,
                            valid_until=datetime.now() + timedelta(days=30),
                            is_active=True
                        ),
                        PromoCode(
                            code="TESTPROMO",
                            name="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥",
                            description="15% —Å–∫–∏–¥–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                            discount_type=DiscountType.PERCENTAGE,
                            discount_value=15,
                            min_order_amount=1000,
                            max_discount_amount=300,
                            usage_limit=50,
                            usage_limit_per_user=3,
                            valid_until=datetime.now() + timedelta(days=365),
                            is_active=True
                        ),
                        PromoCode(
                            code="DELIVERY500",
                            name="–°–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É",
                            description="500‚Ç∏ —Å–∫–∏–¥–∫–∞",
                            discount_type=DiscountType.FIXED,
                            discount_value=500,
                            min_order_amount=1500,
                            usage_limit=200,
                            usage_limit_per_user=2,
                            valid_until=datetime.now() + timedelta(days=14),
                            is_active=True
                        )
                    ]
                    
                    for code in test_codes:
                        db.add(code)
                    
                    await db.commit()
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_codes)} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
                    
                # 5. –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                result = await db.execute(select(PromoCode).where(PromoCode.is_active == True))
                active_codes = result.scalars().all()
                
                print(f"\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                print(f"üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {len(active_codes)}")
                print("\nüîñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                for code in active_codes:
                    discount_text = f"{code.discount_value}%" if code.discount_type == DiscountType.PERCENTAGE else f"{code.discount_value}‚Ç∏"
                    print(f"   ‚Ä¢ {code.code}: {discount_text} (–º–∏–Ω. {code.min_order_amount}‚Ç∏)")
                
                print(f"\nüåê API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ: http://localhost:8000/api/v1/promo-codes/")
                print(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
                await db.rollback()
            finally:
                await db.close()
                
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
        
    return True

if __name__ == "__main__":
    success = asyncio.run(setup_everything())
    if not success:
        sys.exit(1)
    print("\nüéØ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã.")
