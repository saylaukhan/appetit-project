"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –±–ª—é–¥–∞, –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
"""

from sqlalchemy.ext.asyncio import AsyncSession
from passlib.context import CryptContext
from decimal import Decimal
from datetime import datetime, timedelta

from app.models.user import User, UserRole
from app.models.menu import Category, Dish, Modifier
from app.models.promo_code import PromoCode, DiscountType
from app.models.banner import Banner

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


class DatabaseSeeder:
    def __init__(self, db: AsyncSession):
        self.db = db

    async def seed_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–∏–¥–µ—Ä–æ–≤."""
        print("üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        await self.seed_users()
        await self.seed_categories()
        await self.seed_modifiers()
        await self.seed_dishes()
        await self.seed_promo_codes()
        await self.seed_banners()
        
        await self.db.commit()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")

    async def seed_users(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        print("üë• –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        users_data = [
            {
                "phone": "+77771234567",
                "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "role": UserRole.ADMIN,
                "password": "admin123"
            },
            {
                "phone": "+77772345678", 
                "name": "–ü–æ–≤–∞—Ä –ê—Ö–º–µ—Ç",
                "role": UserRole.KITCHEN,
                "password": "kitchen123"
            },
            {
                "phone": "+77773456789",
                "name": "–ö—É—Ä—å–µ—Ä –ê—Ä–º–∞–Ω",
                "role": UserRole.COURIER,
                "password": "courier123"
            },
            {
                "phone": "+77774567890",
                "name": "–ö–ª–∏–µ–Ω—Ç –ê–π–≥—É–ª—å",
                "role": UserRole.CLIENT,
                "password": "client123"
            }
        ]

        for user_data in users_data:
            hashed_password = pwd_context.hash(user_data["password"])
            
            user = User(
                phone=user_data["phone"],
                name=user_data["name"],
                role=user_data["role"],
                hashed_password=hashed_password,
                is_active=True,
                is_verified=True
            )
            
            self.db.add(user)
            print(f"  ‚úì {user_data['name']} ({user_data['role']})")

    async def seed_categories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª—é–¥."""
        print("üìÇ –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
        
        categories_data = [
            {
                "name": "–ü–∏—Ü—Ü–∞",
                "description": "–ê—Ä–æ–º–∞—Ç–Ω–∞—è –ø–∏—Ü—Ü–∞ –Ω–∞ —Ç–æ–Ω–∫–æ–º –∏ –ø—ã—à–Ω–æ–º —Ç–µ—Å—Ç–µ",
                "sort_order": 1
            },
            {
                "name": "–ë—É—Ä–≥–µ—Ä—ã", 
                "description": "–°–æ—á–Ω—ã–µ –±—É—Ä–≥–µ—Ä—ã —Å –º—è—Å–Ω—ã–º–∏ –∫–æ—Ç–ª–µ—Ç–∞–º–∏",
                "sort_order": 2
            },
            {
                "name": "–†–æ–ª–ª—ã –∏ —Å—É—à–∏",
                "description": "–°–≤–µ–∂–∏–µ —Ä–æ–ª–ª—ã –∏ —Å—É—à–∏ –æ—Ç —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞",
                "sort_order": 3
            },
            {
                "name": "–°–∞–ª–∞—Ç—ã",
                "description": "–°–≤–µ–∂–∏–µ —Å–∞–ª–∞—Ç—ã –∏–∑ —Å–µ–∑–æ–Ω–Ω—ã—Ö –æ–≤–æ—â–µ–π",
                "sort_order": 4
            },
            {
                "name": "–°—É–ø—ã",
                "description": "–ì–æ—Ä—è—á–∏–µ —Å—É–ø—ã –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å",
                "sort_order": 5
            },
            {
                "name": "–ù–∞–ø–∏—Ç–∫–∏",
                "description": "–ü—Ä–æ—Ö–ª–∞–¥–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –≥–æ—Ä—è—á–∏–µ –Ω–∞–ø–∏—Ç–∫–∏",
                "sort_order": 6
            },
            {
                "name": "–î–µ—Å–µ—Ä—Ç—ã",
                "description": "–°–ª–∞–¥–∫–∏–µ –¥–µ—Å–µ—Ä—Ç—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–ø–µ–∑—ã",
                "sort_order": 7
            }
        ]

        for cat_data in categories_data:
            category = Category(
                name=cat_data["name"],
                description=cat_data["description"],
                sort_order=cat_data["sort_order"],
                is_active=True
            )
            self.db.add(category)
            print(f"  ‚úì {cat_data['name']}")

    async def seed_modifiers(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤."""
        print("üîß –°–æ–∑–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã...")
        
        modifiers_data = [
            # –†–∞–∑–º–µ—Ä—ã –ø–∏—Ü—Ü—ã
            {"name": "–ú–∞–ª–µ–Ω—å–∫–∞—è 25—Å–º", "price": Decimal("0")},
            {"name": "–°—Ä–µ–¥–Ω—è—è 30—Å–º", "price": Decimal("500")},
            {"name": "–ë–æ–ª—å—à–∞—è 35—Å–º", "price": Decimal("1000")},
            
            # –î–æ–±–∞–≤–∫–∏ –¥–ª—è –±—É—Ä–≥–µ—Ä–æ–≤
            {"name": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ç–ª–µ—Ç–∞", "price": Decimal("800")},
            {"name": "–ë–µ–∫–æ–Ω", "price": Decimal("400")},
            {"name": "–°—ã—Ä –ß–µ–¥–¥–µ—Ä", "price": Decimal("200")},
            {"name": "–û—Å—Ç—Ä—ã–π —Å–æ—É—Å", "price": Decimal("0")},
            
            # –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫ —Ä–æ–ª–ª–∞–º
            {"name": "–ò–º–±–∏—Ä—å", "price": Decimal("0")},
            {"name": "–í–∞—Å–∞–±–∏", "price": Decimal("0")},
            {"name": "–°–æ–µ–≤—ã–π —Å–æ—É—Å", "price": Decimal("0")},
            {"name": "–ö—É–Ω–∂—É—Ç", "price": Decimal("100")},
            
            # –ó–∞–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Å–∞–ª–∞—Ç–æ–≤
            {"name": "–û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ", "price": Decimal("0")},
            {"name": "–¶–µ–∑–∞—Ä—å —Å–æ—É—Å", "price": Decimal("150")},
            {"name": "–ë–∞–ª—å–∑–∞–º–∏–∫", "price": Decimal("100")},
            
            # –†–∞–∑–º–µ—Ä—ã –Ω–∞–ø–∏—Ç–∫–æ–≤
            {"name": "0.3–ª", "price": Decimal("0")},
            {"name": "0.5–ª", "price": Decimal("200")},
            {"name": "1–ª", "price": Decimal("400")},
        ]

        for mod_data in modifiers_data:
            modifier = Modifier(
                name=mod_data["name"],
                price=mod_data["price"]
            )
            self.db.add(modifier)
            print(f"  ‚úì {mod_data['name']}")

    async def seed_dishes(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥."""
        print("üçï –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–∞...")
        
        dishes_data = [
            # –ü–∏—Ü—Ü–∞
            {
                "name": "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
                "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–Ω—ã–º —Å–æ—É—Å–æ–º, –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π –∏ –±–∞–∑–∏–ª–∏–∫–æ–º",
                "price": Decimal("2500"),
                "category_id": 1,
                "weight": "400–≥",
                "is_popular": True
            },
            {
                "name": "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏",
                "description": "–û—Å—Ç—Ä–∞—è –ø–∏—Ü—Ü–∞ —Å —Å–∞–ª—è–º–∏ –ø–µ–ø–ø–µ—Ä–æ–Ω–∏ –∏ –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π",
                "price": Decimal("3200"),
                "category_id": 1,
                "weight": "450–≥",
                "is_popular": True
            },
            {
                "name": "–ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞",
                "description": "–ü–∏—Ü—Ü–∞ —Å —á–µ—Ç—ã—Ä—å–º—è –≤–∏–¥–∞–º–∏ —Å—ã—Ä–∞: –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –ø–∞—Ä–º–µ–∑–∞–Ω, –≥–æ—Ä–≥–æ–Ω–∑–æ–ª–∞, —Ñ–µ—Ç–∞",
                "price": Decimal("3800"),
                "category_id": 1,
                "weight": "420–≥"
            },
            
            # –ë—É—Ä–≥–µ—Ä—ã
            {
                "name": "–ö–ª–∞—Å—Å–∏–∫ –ë—É—Ä–≥–µ—Ä",
                "description": "–°–æ—á–Ω–∞—è –≥–æ–≤—è–∂—å—è –∫–æ—Ç–ª–µ—Ç–∞, —Å–∞–ª–∞—Ç, –ø–æ–º–∏–¥–æ—Ä, –ª—É–∫, —Å–æ—É—Å",
                "price": Decimal("2200"),
                "category_id": 2,
                "weight": "350–≥",
                "is_popular": True
            },
            {
                "name": "–ß–∏–∑–±—É—Ä–≥–µ—Ä",
                "description": "–ë—É—Ä–≥–µ—Ä —Å –¥–≤—É–º—è –∫–æ—Ç–ª–µ—Ç–∞–º–∏, —Å—ã—Ä–æ–º —á–µ–¥–¥–µ—Ä –∏ —Ñ–∏—Ä–º–µ–Ω–Ω—ã–º —Å–æ—É—Å–æ–º",
                "price": Decimal("2800"),
                "category_id": 2,
                "weight": "400–≥"
            },
            {
                "name": "–ö—É—Ä–∏–Ω—ã–π –ë—É—Ä–≥–µ—Ä",
                "description": "–•—Ä—É—Å—Ç—è—â–∞—è –∫—É—Ä–∏–Ω–∞—è –∫–æ—Ç–ª–µ—Ç–∞ –≤ –ø–∞–Ω–∏—Ä–æ–≤–∫–µ —Å —Å–∞–ª–∞—Ç–æ–º –∏ –º–∞–π–æ–Ω–µ–∑–æ–º",
                "price": Decimal("2000"),
                "category_id": 2,
                "weight": "320–≥"
            },
            
            # –†–æ–ª–ª—ã –∏ —Å—É—à–∏
            {
                "name": "–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è",
                "description": "–†–æ–ª–ª —Å –ª–æ—Å–æ—Å–µ–º, —Å–ª–∏–≤–æ—á–Ω—ã–º —Å—ã—Ä–æ–º –∏ –æ–≥—É—Ä—Ü–æ–º",
                "price": Decimal("1800"),
                "category_id": 3,
                "weight": "220–≥",
                "is_popular": True
            },
            {
                "name": "–ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è",
                "description": "–†–æ–ª–ª —Å –∫—Ä–µ–≤–µ—Ç–∫–æ–π, –∞–≤–æ–∫–∞–¥–æ –∏ –æ–≥—É—Ä—Ü–æ–º –≤ –∫—É–Ω–∂—É—Ç–µ",
                "price": Decimal("1600"),
                "category_id": 3,
                "weight": "200–≥"
            },
            {
                "name": "–î—Ä–∞–∫–æ–Ω",
                "description": "–†–æ–ª–ª —Å —É–≥—Ä–µ–º, –∞–≤–æ–∫–∞–¥–æ –∏ —É–Ω–∞–≥–∏ —Å–æ—É—Å–æ–º",
                "price": Decimal("2200"),
                "category_id": 3,
                "weight": "240–≥"
            },
            
            # –°–∞–ª–∞—Ç—ã
            {
                "name": "–¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π",
                "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π –≥—Ä–∏–ª—å –∏ –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º",
                "price": Decimal("1500"),
                "category_id": 4,
                "weight": "300–≥",
                "is_popular": True
            },
            {
                "name": "–ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç",
                "description": "–°–≤–µ–∂–∏–µ –æ–≤–æ—â–∏, —Ñ–µ—Ç–∞, –º–∞—Å–ª–∏–Ω—ã, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ",
                "price": Decimal("1200"),
                "category_id": 4,
                "weight": "280–≥"
            },
            
            # –°—É–ø—ã
            {
                "name": "–ë–æ—Ä—â —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π",
                "description": "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ä—â —Å –≥–æ–≤—è–¥–∏–Ω–æ–π –∏ —Å–º–µ—Ç–∞–Ω–æ–π",
                "price": Decimal("1000"),
                "category_id": 5,
                "weight": "400–º–ª"
            },
            {
                "name": "–°–æ–ª—è–Ω–∫–∞ –º—è—Å–Ω–∞—è",
                "description": "–°—ã—Ç–Ω–∞—è —Å–æ–ª—è–Ω–∫–∞ —Å –∫–æ–ø—á–µ–Ω–æ—Å—Ç—è–º–∏ –∏ –º–∞—Å–ª–∏–Ω–∞–º–∏",
                "price": Decimal("1200"),
                "category_id": 5,
                "weight": "400–º–ª"
            },
            
            # –ù–∞–ø–∏—Ç–∫–∏
            {
                "name": "–ö–æ–∫–∞-–ö–æ–ª–∞",
                "description": "–û—Å–≤–µ–∂–∞—é—â–∞—è –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–æ–¥–∞",
                "price": Decimal("300"),
                "category_id": 6,
                "weight": "0.5–ª"
            },
            {
                "name": "–ó–µ–ª–µ–Ω—ã–π —á–∞–π",
                "description": "–ê—Ä–æ–º–∞—Ç–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π —á–∞–π",
                "price": Decimal("200"),
                "category_id": 6,
                "weight": "400–º–ª"
            },
            {
                "name": "–°–≤–µ–∂–µ–≤—ã–∂–∞—Ç—ã–π —Å–æ–∫",
                "description": "–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
                "price": Decimal("600"),
                "category_id": 6,
                "weight": "300–º–ª"
            },
            
            # –î–µ—Å–µ—Ä—Ç—ã
            {
                "name": "–¢–∏—Ä–∞–º–∏—Å—É",
                "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π –¥–µ—Å–µ—Ä—Ç —Å –º–∞—Å–∫–∞—Ä–ø–æ–Ω–µ",
                "price": Decimal("900"),
                "category_id": 7,
                "weight": "120–≥"
            },
            {
                "name": "–ß–∏–∑–∫–µ–π–∫ –ù—å—é-–ô–æ—Ä–∫",
                "description": "–ù–µ–∂–Ω—ã–π —Ç–≤–æ—Ä–æ–∂–Ω—ã–π —Ç–æ—Ä—Ç —Å —è–≥–æ–¥–Ω—ã–º —Å–æ—É—Å–æ–º",
                "price": Decimal("800"),
                "category_id": 7,
                "weight": "130–≥"
            }
        ]

        for dish_data in dishes_data:
            dish = Dish(
                name=dish_data["name"],
                description=dish_data["description"],
                price=dish_data["price"],
                category_id=dish_data["category_id"],
                weight=dish_data["weight"],
                is_available=True,
                is_popular=dish_data.get("is_popular", False)
            )
            self.db.add(dish)
            print(f"  ‚úì {dish_data['name']} - {dish_data['price']} —Ç–≥")

    async def seed_promo_codes(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."""
        print("üéØ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã...")
        
        promo_codes_data = [
            {
                "code": "WELCOME10",
                "name": "–°–∫–∏–¥–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
                "description": "10% —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑",
                "discount_type": DiscountType.PERCENTAGE,
                "discount_value": Decimal("10"),
                "min_order_amount": Decimal("2000"),
                "valid_until": datetime.now() + timedelta(days=30)
            },
            {
                "code": "PIZZA20",
                "name": "–°–∫–∏–¥–∫–∞ –Ω–∞ –ø–∏—Ü—Ü—É",
                "description": "20% —Å–∫–∏–¥–∫–∞ –Ω–∞ –ª—é–±—É—é –ø–∏—Ü—Ü—É",
                "discount_type": DiscountType.PERCENTAGE,
                "discount_value": Decimal("20"),
                "min_order_amount": Decimal("2500"),
                "valid_until": datetime.now() + timedelta(days=7)
            },
            {
                "code": "DELIVERY500",
                "name": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
                "description": "500 —Ç–≥ —Å–∫–∏–¥–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É",
                "discount_type": DiscountType.FIXED,
                "discount_value": Decimal("500"),
                "min_order_amount": Decimal("1500"),
                "valid_until": datetime.now() + timedelta(days=14)
            }
        ]

        for promo_data in promo_codes_data:
            promo = PromoCode(
                code=promo_data["code"],
                name=promo_data["name"],
                description=promo_data["description"],
                discount_type=promo_data["discount_type"],
                discount_value=promo_data["discount_value"],
                min_order_amount=promo_data["min_order_amount"],
                valid_until=promo_data["valid_until"],
                is_active=True
            )
            self.db.add(promo)
            print(f"  ‚úì {promo_data['code']} - {promo_data['discount_value']}{'%' if promo_data['discount_type'] == DiscountType.PERCENTAGE else '—Ç–≥'}")

    async def seed_banners(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–æ–≤."""
        print("üé® –°–æ–∑–¥–∞–µ–º –±–∞–Ω–Ω–µ—Ä—ã...")
        
        banners_data = [
            {
                "title": "–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å—é –ø–∏—Ü—Ü—É",
                "description": "–¢–æ–ª—å–∫–æ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞!",
                "image": "/static/banners/pizza-banner.jpg",
                "position": "main",
                "sort_order": 1,
                "show_until": datetime.now() + timedelta(days=30)
            },
            {
                "title": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
                "description": "–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 3000 —Ç–µ–Ω–≥–µ",
                "image": "/static/banners/delivery-banner.jpg",
                "position": "main",
                "sort_order": 2
            },
            {
                "title": "–ù–æ–≤–æ–µ —Å—É—à–∏-–º–µ–Ω—é",
                "description": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à–∏ –Ω–æ–≤—ã–µ —Ä–æ–ª–ª—ã",
                "image": "/static/banners/sushi-banner.jpg",
                "position": "category",
                "sort_order": 1
            }
        ]

        for banner_data in banners_data:
            banner = Banner(
                title=banner_data["title"],
                description=banner_data["description"],
                image=banner_data["image"],
                position=banner_data["position"],
                sort_order=banner_data["sort_order"],
                show_until=banner_data.get("show_until"),
                is_active=True
            )
            self.db.add(banner)
            print(f"  ‚úì {banner_data['title']}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–¥–µ—Ä–∞
async def run_seeder(db: AsyncSession):
    """–ó–∞–ø—É—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    seeder = DatabaseSeeder(db)
    await seeder.seed_all()
