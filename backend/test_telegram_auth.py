#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from app.services.telegram import telegram_service
from app.core.config import settings

async def test_telegram_auth():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   TELEGRAM_ENABLED: {settings.TELEGRAM_ENABLED}")
    print(f"   TELEGRAM_API_ID: {'‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.TELEGRAM_API_ID != 'your_telegram_api_id' else '‚úó –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   TELEGRAM_API_HASH: {'‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.TELEGRAM_API_HASH != 'your_telegram_api_hash' else '‚úó –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print()
    
    if not settings.TELEGRAM_ENABLED:
        print("‚ö†Ô∏è  Telegram –æ—Ç–∫–ª—é—á–µ–Ω. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")
    
    # –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone = input("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +77001234567): ").strip()
    
    if not phone.startswith('+7') or len(phone) != 12:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +77001234567")
        return
    
    try:
        # –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞
        print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ {phone}...")
        result = await telegram_service.request_telegram_code(phone)
        
        if not result['success']:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            return
        
        print("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
        if result.get('dev_mode'):
            print(f"üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ö–æ–¥: {result.get('dev_code')}")
        
        phone_code_hash = result.get('phone_code_hash')
        
        # –®–∞–≥ 2: –í–≤–æ–¥ –∫–æ–¥–∞
        code = input("\nüî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ").strip()
        
        if not code.isdigit() or len(code) < 4:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞")
            return
        
        # –®–∞ÔøΩÔøΩ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥...")
        verify_result = await telegram_service.verify_telegram_code(
            phone, code, phone_code_hash
        )
        
        if verify_result['success']:
            print("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            if verify_result.get('user_info'):
                user_info = verify_result['user_info']
                print(f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:")
                print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {user_info.get('phone')}")
                print(f"   Telegram ID: {user_info.get('telegram_id', 'N/A')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {verify_result['error']}")
            
            if verify_result.get('requires_2fa'):
                print("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
    
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        await telegram_service.disconnect_all_clients()
        print("‚úÖ –ì–æ—Ç–æ–≤–æ!")

async def test_cleanup():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤"""
    print("\nüßπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤...")
    await telegram_service.cleanup_expired_codes()
    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("   –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (TELEGRAM_ENABLED=false)")
    print()
    
    try:
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        asyncio.run(test_telegram_auth())
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
        asyncio.run(test_cleanup())
        
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()