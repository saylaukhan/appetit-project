#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
–ó–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ backend: python create_promo_table.py
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.database import get_db_session, engine
from app.models import Base, PromoCode, PromoCodeUsage, DiscountType
from sqlalchemy.ext.asyncio import AsyncSession

async def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

async def create_test_promo_codes():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤...")
    
    async for db in get_db_session():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
            from sqlalchemy import select
            existing_codes = await db.execute(select(PromoCode))
            if existing_codes.scalars().first():
                print("‚ÑπÔ∏è  –ü—Ä–æ–º–æ–∫–æ–¥—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
            test_promos = [
                PromoCode(
                    code="WELCOME10",
                    name="–°–∫–∏–¥–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
                    description="10% —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑",
                    discount_type=DiscountType.PERCENTAGE,
                    discount_value=10,
                    min_order_amount=2000,
                    max_discount_amount=500,
                    usage_limit=500,
                    usage_limit_per_user=1,
                    valid_from=datetime.now(),
                    valid_until=datetime.now() + timedelta(days=30),
                    is_active=True
                ),
                PromoCode(
                    code="PIZZA20",
                    name="–°–∫–∏–¥–∫–∞ –Ω–∞ –ø–∏—Ü—Ü—É",
                    description="20% —Å–∫–∏–¥–∫–∞ –Ω–∞ –ª—é–±—É—é –ø–∏—Ü—Ü—É",
                    discount_type=DiscountType.PERCENTAGE,
                    discount_value=20,
                    min_order_amount=2500,
                    max_discount_amount=1000,
                    usage_limit=100,
                    usage_limit_per_user=2,
                    valid_from=datetime.now(),
                    valid_until=datetime.now() + timedelta(days=7),
                    is_active=True
                ),
                PromoCode(
                    code="DELIVERY500",
                    name="–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
                    description="–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞ 500‚Ç∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É",
                    discount_type=DiscountType.FIXED,
                    discount_value=500,
                    min_order_amount=1500,
                    usage_limit=200,
                    usage_limit_per_user=3,
                    valid_from=datetime.now(),
                    valid_until=datetime.now() + timedelta(days=14),
                    is_active=True
                ),
                PromoCode(
                    code="TESTPROMO",
                    name="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥",
                    description="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                    discount_type=DiscountType.PERCENTAGE,
                    discount_value=15,
                    min_order_amount=1000,
                    max_discount_amount=300,
                    usage_limit=10,
                    usage_limit_per_user=1,
                    valid_from=datetime.now(),
                    valid_until=datetime.now() + timedelta(days=365),
                    is_active=True
                )
            ]
            
            for promo in test_promos:
                db.add(promo)
            
            await db.commit()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_promos)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:")
            for promo in test_promos:
                print(f"   - {promo.code}: {promo.name}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")
            await db.rollback()
        finally:
            await db.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤...")
    
    try:
        await create_tables()
        await create_test_promo_codes()
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("- WELCOME10: 10% —Å–∫–∏–¥–∫–∞ (–º–∏–Ω. –∑–∞–∫–∞–∑ 2000‚Ç∏)")
        print("- PIZZA20: 20% —Å–∫–∏–¥–∫–∞ (–º–∏–Ω. –∑–∞–∫–∞–∑ 2500‚Ç∏)")
        print("- DELIVERY500: 500‚Ç∏ —Å–∫–∏–¥–∫–∞ (–º–∏–Ω. –∑–∞–∫–∞–∑ 1500‚Ç∏)")
        print("- TESTPROMO: 15% —Å–∫–∏–¥–∫–∞ (–º–∏–Ω. –∑–∞–∫–∞–∑ 1000‚Ç∏)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
