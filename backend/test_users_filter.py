import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.core.database import get_db_session
from app.models.user import User, UserRole
from app.api.endpoints.users import get_users
from sqlalchemy import select

async def test_users_filter():
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    async for db in get_db_session():
        try:
            # –°–æ–∑–¥–∞–µ–º mock admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            admin_user = User(
                id=999,
                name="Test Admin",
                phone="+77777777777",
                role=UserRole.ADMIN,
                is_active=True,
                hashed_password="test"
            )
            
            print("\nüìã 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            response = await get_users(
                page=1,
                per_page=20,
                search=None,
                role=None,
                is_active=None,
                current_user=admin_user,
                db=db
            )
            print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.total}")
            
            print("\nüîç 2. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏ '–ö–ª–∏–µ–Ω—Ç':")
            response = await get_users(
                page=1,
                per_page=20,
                search="–ö–ª–∏–µ–Ω—Ç",
                role=None,
                is_active=None,
                current_user=admin_user,
                db=db
            )
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.total}")
            for user in response.users:
                print(f"   - {user.name} ({user.role})")
            
            print("\nüë®‚Äçüíº 3. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ä–æ–ª–∏ 'admin':")
            response = await get_users(
                page=1,
                per_page=20,
                search=None,
                role="admin",
                is_active=None,
                current_user=admin_user,
                db=db
            )
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {response.total}")
            for user in response.users:
                print(f"   - {user.name} ({user.role})")
            
            print("\nüë• 4. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ä–æ–ª–∏ 'client':")
            response = await get_users(
                page=1,
                per_page=20,
                search=None,
                role="client",
                is_active=None,
                current_user=admin_user,
                db=db
            )
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {response.total}")
            for user in response.users:
                print(f"   - {user.name} ({user.role})")
            
            print("\nüç≥ 5. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ä–æ–ª–∏ 'kitchen':")
            response = await get_users(
                page=1,
                per_page=20,
                search=None,
                role="kitchen",
                is_active=None,
                current_user=admin_user,
                db=db
            )
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–≤–∞—Ä–æ–≤: {response.total}")
            for user in response.users:
                print(f"   - {user.name} ({user.role})")
            
            print("\nüöö 6. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ä–æ–ª–∏ 'courier':")
            response = await get_users(
                page=1,
                per_page=20,
                search=None,
                role="courier",
                is_active=None,
                current_user=admin_user,
                db=db
            )
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—å–µ—Ä–æ–≤: {response.total}")
            for user in response.users:
                print(f"   - {user.name} ({user.role})")
            
            print("\nüü¢ 7. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ):")
            response = await get_users(
                page=1,
                per_page=20,
                search=None,
                role=None,
                is_active=True,
                current_user=admin_user,
                db=db
            )
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {response.total}")
            
            print("\nüîçüç≥ 8. –¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ (–ø–æ–∏—Å–∫ + —Ä–æ–ª—å):")
            response = await get_users(
                page=1,
                per_page=20,
                search="–ü–æ–≤–∞—Ä",
                role="kitchen",
                is_active=None,
                current_user=admin_user,
                db=db
            )
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–≤–∞—Ä–æ–≤ —Å –∏–º–µ–Ω–µ–º '–ü–æ–≤–∞—Ä': {response.total}")
            for user in response.users:
                print(f"   - {user.name} ({user.role})")
            
            break
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
            import traceback
            traceback.print_exc()
            break

if __name__ == "__main__":
    asyncio.run(test_users_filter())