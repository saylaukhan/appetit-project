import api from './api'

class UserService {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –ø–æ–∏—Å–∫–æ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
  async getUsers(page = 1, perPage = 20, search = '', role = '', isActive = null) {
    try {
      console.log('üîç UserService: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', { page, perPage, search, role, isActive })
      
      const params = new URLSearchParams({
        page: page.toString(),
        per_page: perPage.toString()
      })
      
      if (search?.trim()) {
        params.append('search', search.trim())
      }

      if (role?.trim()) {
        params.append('role', role.trim())
      }

      if (isActive !== null) {
        params.append('is_active', isActive.toString())
      }

      console.log('üì° UserService: URL –∑–∞–ø—Ä–æ—Å–∞:', `/api/v1/users?${params}`)
      const response = await api.get(`/api/v1/users?${params}`)
      console.log('‚úÖ UserService: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response.data)
      return response.data
    } catch (error) {
      console.error('‚ùå UserService: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
      console.error('‚ùå UserService: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message
      })
      throw error
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  async getUser(userId) {
    const response = await api.get(`/api/v1/users/${userId}`)
    return response.data
  }

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateUserRole(userId, role) {
    const response = await api.put(`/api/v1/users/${userId}/role`, { role })
    return response.data
  }

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateUserStatus(userId, isActive) {
    const response = await api.put(`/api/v1/users/${userId}/status`, { is_active: isActive })
    return response.data
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getUsersStats() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const data = await this.getUsers(1, 1)
      return {
        total: data.total,
        totalPages: data.total_pages
      }
    } catch (error) {
      console.error('Error fetching users stats:', error)
      throw error
    }
  }
}

export default new UserService()