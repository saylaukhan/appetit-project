import React, { useState, useEffect } from 'react'
import { menuAPI } from '../../services/api'
import { useCart } from '../../contexts/CartContext'
import LoadingSpinner from '../../components/common/LoadingSpinner'
import styles from './MenuPage.module.css'

function MenuPage() {
  const [categories, setCategories] = useState([])
  const [dishes, setDishes] = useState([])
  const [selectedCategory, setSelectedCategory] = useState(null)
  const [activeCategory, setActiveCategory] = useState(null) // –î–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
  const [loading, setLoading] = useState(true)
  const [dishesLoading, setDishesLoading] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const [error, setError] = useState(null)
  const [sortBy, setSortBy] = useState('category') // 'alphabet', 'new', 'category'
  const [sortDropdownOpen, setSortDropdownOpen] = useState(false)
  const [dropdownPosition, setDropdownPosition] = useState({ top: 0, left: 0, width: 0 })
  const { addItem, isInCart, getItemQuantity } = useCart()

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadCategories()
  }, [])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±–ª—é–¥ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  useEffect(() => {
    loadDishes()
  }, [searchQuery])

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (sortDropdownOpen) {
        const dropdown = event.target.closest(`.${styles.sortDropdown}`)
        const dropdownMenu = event.target.closest(`.${styles.sortDropdownMenu}`)
        
        if (!dropdown && !dropdownMenu) {
          setSortDropdownOpen(false)
        }
      }
    }

    const handleScroll = () => {
      if (sortDropdownOpen) {
        setSortDropdownOpen(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    window.addEventListener('scroll', handleScroll, true)
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
      window.removeEventListener('scroll', handleScroll, true)
    }
  }, [sortDropdownOpen])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  useEffect(() => {
    const handleScroll = () => {
      const categoryElements = categories.map(cat => ({
        id: cat.id,
        element: document.getElementById(`category-${cat.id}`)
      })).filter(item => item.element)

      const scrollPosition = window.scrollY + 150 // –û—Ç—Å—Ç—É–ø –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏

      // –ù–∞–π–¥–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      let currentActiveCategory = null
      
      for (let i = categoryElements.length - 1; i >= 0; i--) {
        const { id, element } = categoryElements[i]
        if (element.offsetTop <= scrollPosition) {
          currentActiveCategory = id
          break
        }
      }

      // –ï—Å–ª–∏ —Å–∫—Ä–æ–ª–ª –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É, —É–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      if (window.scrollY < 100) {
        currentActiveCategory = null
      }

      setActiveCategory(currentActiveCategory)
    }

    window.addEventListener('scroll', handleScroll)
    return () => window.removeEventListener('scroll', handleScroll)
  }, [categories])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –±–ª—é–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const groupDishesByCategory = (dishesToGroup) => {
    const grouped = {}
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories.forEach(category => {
      grouped[category.id] = {
        category,
        dishes: []
      }
    })

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª—é–¥–∞
    dishesToGroup.forEach(dish => {
      if (grouped[dish.category_id]) {
        grouped[dish.category_id].dishes.push(dish)
      }
    })

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–ª—é–¥–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    Object.values(grouped).forEach(group => {
      group.dishes = sortDishes(group.dishes)
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –±–ª—é–¥–∞–º–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ sort_order
    return Object.values(grouped)
      .filter(group => group.dishes.length > 0)
      .sort((a, b) => a.category.sort_order - b.category.sort_order)
  }

  const loadCategories = async () => {
    try {
      setError(null)
      const response = await menuAPI.getCategories()
      setCategories(response.data)
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', response.data.length)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error)
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é')
    } finally {
      setLoading(false)
    }
  }

  const loadDishes = async () => {
    setDishesLoading(true)
    try {
      const params = { limit: 100 } // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –±–ª—é–¥–∞
      if (searchQuery) params.search = searchQuery

      const response = await menuAPI.getDishes(params)
      setDishes(response.data)
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –±–ª—é–¥:', response.data.length)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª—é–¥:', error)
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–ª—é–¥–∞')
    } finally {
      setDishesLoading(false)
    }
  }

  const handleCategorySelect = (categoryId) => {
    if (categoryId === null) {
      // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è "–í—Å–µ –±–ª—é–¥–∞"
      window.scrollTo({ top: 0, behavior: 'smooth' })
      setSelectedCategory(null)
      setActiveCategory(null)
    } else {
      // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categoryElement = document.getElementById(`category-${categoryId}`)
      if (categoryElement) {
        const headerOffset = 100 // –û—Ç—Å—Ç—É–ø –æ—Ç –≤–µ—Ä—Ö–∞
        const elementPosition = categoryElement.offsetTop
        const offsetPosition = elementPosition - headerOffset

        window.scrollTo({
          top: offsetPosition,
          behavior: 'smooth'
        })
      }
      setSelectedCategory(categoryId)
      setActiveCategory(categoryId)
    }
  }

  const handleAddToCart = (dish) => {
    addItem(dish)
  }

  const handleSortChange = (newSortBy) => {
    setSortBy(newSortBy)
    setSortDropdownOpen(false)
  }

  const toggleSortDropdown = (event) => {
    const newOpen = !sortDropdownOpen
    console.log('Toggle dropdown:', newOpen)
    
    if (newOpen) {
      // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
      const buttonRect = event.currentTarget.getBoundingClientRect()
      setDropdownPosition({
        top: buttonRect.bottom + 4, // 4px –æ—Ç—Å—Ç—É–ø
        left: buttonRect.left,
        width: buttonRect.width
      })
    }
    
    setSortDropdownOpen(newOpen)
  }

  const getSortLabel = (sortType) => {
    switch (sortType) {
      case 'category':
        return '–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'
      case 'alphabet':
        return '–ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É'
      case 'new':
        return '–ù–æ–≤–∏–Ω–∫–∏ –∏ —Ö–∏—Ç—ã'
      default:
        return '–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º'
    }
  }

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –±–ª—é–¥
  const sortDishes = (dishesToSort) => {
    const sorted = [...dishesToSort]
    
    switch (sortBy) {
      case 'alphabet':
        return sorted.sort((a, b) => a.name.localeCompare(b.name, 'ru'))
      
      case 'new':
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID (–Ω–æ–≤—ã–µ –±–ª—é–¥–∞ –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π ID) –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        return sorted.sort((a, b) => {
          // –°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤–∏–Ω–∫–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –Ω–æ–≤–∏–Ω–∫–∏ –∏–º–µ—é—Ç —Å–ª–æ–≤–æ "–ù–æ–≤–∏–Ω–∫–∞" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)
          const aIsNew = a.name.includes('–ù–æ–≤–∏–Ω–∫–∞')
          const bIsNew = b.name.includes('–ù–æ–≤–∏–Ω–∫–∞')
          if (aIsNew && !bIsNew) return -1
          if (!aIsNew && bIsNew) return 1
          
          // –ó–∞—Ç–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
          if (a.is_popular && !b.is_popular) return -1
          if (!a.is_popular && b.is_popular) return 1
          
          // –ó–∞—Ç–µ–º –ø–æ ID (–Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏)
          return b.id - a.id
        })
      
      case 'category':
        return sorted.sort((a, b) => {
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ category_id, –∑–∞—Ç–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          if (a.category_id !== b.category_id) {
            return a.category_id - b.category_id
          }
          // –í–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏, –∑–∞—Ç–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
          if (a.is_popular && !b.is_popular) return -1
          if (!a.is_popular && b.is_popular) return 1
          return a.name.localeCompare(b.name, 'ru')
        })
      
      default:
        return sorted
    }
  }

  const formatPrice = (price) => {
    return `${parseFloat(price).toFixed(0)} ‚Ç∏`
  }

  // SVG placeholder –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–ª—é–¥
  const createPlaceholderImage = (categoryName = '') => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const getCategoryStyle = (category) => {
      const categoryLower = category.toLowerCase()
      
      if (categoryLower.includes('–ø–∏—Ü—Ü–∞')) {
        return {
          gradient1: '#ff6b6b', gradient2: '#ee5a52',
          icon: 'üçï', name: '–ü–∏—Ü—Ü–∞'
        }
      } else if (categoryLower.includes('—Å—É—à–∏') || categoryLower.includes('—Ä–æ–ª–ª—ã')) {
        return {
          gradient1: '#4ecdc4', gradient2: '#44a08d',
          icon: 'üç£', name: '–°—É—à–∏'
        }
      } else if (categoryLower.includes('–±—É—Ä–≥–µ—Ä') || categoryLower.includes('—Å—ç–Ω–¥–≤–∏—á')) {
        return {
          gradient1: '#ffa726', gradient2: '#ff9800',
          icon: 'üçî', name: '–ë—É—Ä–≥–µ—Ä—ã'
        }
      } else if (categoryLower.includes('—Å–∞–ª–∞—Ç')) {
        return {
          gradient1: '#66bb6a', gradient2: '#4caf50',
          icon: 'ü•ó', name: '–°–∞–ª–∞—Ç—ã'
        }
      } else if (categoryLower.includes('–Ω–∞–ø–∏—Ç–∫–∏') || categoryLower.includes('—Å–æ–∫')) {
        return {
          gradient1: '#42a5f5', gradient2: '#2196f3',
          icon: 'ü•§', name: '–ù–∞–ø–∏—Ç–∫–∏'
        }
      } else if (categoryLower.includes('–¥–µ—Å–µ—Ä—Ç') || categoryLower.includes('—Å–ª–∞–¥–∫–æ–µ')) {
        return {
          gradient1: '#ab47bc', gradient2: '#9c27b0',
          icon: 'üßÅ', name: '–î–µ—Å–µ—Ä—Ç—ã'
        }
      } else if (categoryLower.includes('—Å—É–ø')) {
        return {
          gradient1: '#ef5350', gradient2: '#f44336',
          icon: 'üç≤', name: '–°—É–ø—ã'
        }
      } else if (categoryLower.includes('—à–∞—É—Ä–º–∞') || categoryLower.includes('—à–∞–≤–µ—Ä–º–∞')) {
        return {
          gradient1: '#ffb74d', gradient2: '#ff9800',
          icon: 'üåØ', name: '–®–∞—É—Ä–º–∞'
        }
      }
      
      // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—Ç–∏–ª—å
      return {
        gradient1: '#f8f9fa', gradient2: '#e9ecef',
        icon: 'üçΩÔ∏è', name: '–ë–ª—é–¥–æ'
      }
    }

    const style = getCategoryStyle(categoryName)
    
    const svg = `
      <svg width="300" height="300" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:${style.gradient1};stop-opacity:1" />
            <stop offset="100%" style="stop-color:${style.gradient2};stop-opacity:1" />
          </linearGradient>
          <filter id="shadow" x="-20%" y="-20%" width="140%" height="140%">
            <feDropShadow dx="2" dy="2" stdDeviation="3" flood-color="#000000" flood-opacity="0.3"/>
          </filter>
        </defs>
        <rect width="300" height="300" fill="url(#grad1)"/>
        <circle cx="150" cy="120" r="45" fill="rgba(255,255,255,0.2)" filter="url(#shadow)"/>
        <text x="150" y="140" font-family="Arial, sans-serif" font-size="48" text-anchor="middle" fill="rgba(255,255,255,0.9)">${style.icon}</text>
        <rect x="75" y="180" width="150" height="16" fill="rgba(255,255,255,0.3)" rx="8"/>
        <rect x="90" y="210" width="120" height="12" fill="rgba(255,255,255,0.2)" rx="6"/>
        <text x="150" y="250" font-family="Arial, sans-serif" font-size="16" fill="rgba(255,255,255,0.9)" text-anchor="middle" font-weight="bold">${style.name}</text>
        <text x="150" y="270" font-family="Arial, sans-serif" font-size="12" fill="rgba(255,255,255,0.7)" text-anchor="middle">300 √ó 300</text>
      </svg>
    `
    return `data:image/svg+xml;base64,${btoa(svg)}`
  }

  if (loading) {
    return (
      <div className={styles.menuContainer}>
        <LoadingSpinner />
      </div>
    )
  }

  if (error) {
    return (
      <div className={styles.menuContainer}>
        <div className={styles.errorMessage}>
          <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é</h2>
          <p>{error}</p>
          <button onClick={() => window.location.reload()} className={styles.retryButton}>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className={styles.menuContainer}>
      {/* –ë–∞–Ω–Ω–µ—Ä —Å –∞–∫—Ü–∏–µ–π */}
      <div className={styles.promoBanner}>
        <div className={styles.promoContent}>
          <div className={styles.promoText}>
            <h2>–ö–ê–ñ–î–´–ô –í–¢–û–†–ù–ò–ö</h2>
            <div className={styles.promoOffer}>1+1</div>
            <p>–ù–ê –§–ò–†–ú–ï–ù–ù–£–Æ<br />–°–†–ï–î–ù–Æ–Æ –®–ê–£–†–ú–£</p>
          </div>
          <div className={styles.promoImages}>
            <img 
              src="https://cdn-kz11.foodpicasso.com/assets/2025/03/19/cb4e1a15ed8eb66b4cb3f04266b87a8f---jpeg_420x420:whitepadding15_94310_convert.webp?v2" 
              alt="–§–∏—Ä–º–µ–Ω–Ω–∞—è —à–∞—É—Ä–º–∞"
              onError={(e) => {
                e.target.src = createPlaceholderImage('–®–∞—É—Ä–º–∞')
              }}
            />
            <img 
              src="https://cdn-kz11.foodpicasso.com/assets/2025/04/04/b9ef70d2195ea30d7a1a5a1b22450db8---jpeg_420x420:whitepadding15_94310_convert.webp?v2" 
              alt="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —à–∞—É—Ä–º–∞"
              onError={(e) => {
                e.target.src = createPlaceholderImage('–®–∞—É—Ä–º–∞')
              }}
            />
          </div>
          <div className={styles.promoLabel}>1+1</div>
        </div>
      </div>

      <div className={styles.menuContent}>
        {/* –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é */}
        <aside className={styles.sidebar}>
          {/* –ü–∞–Ω–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
          <div className={styles.sidebarPanel}>
            <div className={styles.panelHeader}>
              <h3 className={styles.panelTitle}>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
            </div>
            <div className={styles.panelContent}>
              <div className={styles.categoryList}>
                <button
                  className={`${styles.categoryItem} ${activeCategory === null ? styles.active : ''}`}
                  onClick={() => handleCategorySelect(null)}
                >
                  –í—Å–µ –±–ª—é–¥–∞
                </button>
                {categories.map((category) => (
                  <button
                    key={category.id}
                    className={`${styles.categoryItem} ${activeCategory === category.id ? styles.active : ''}`}
                    onClick={() => handleCategorySelect(category.id)}
                  >
                    {category.name}
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* –ü–∞–Ω–µ–ª—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ */}
          <div className={styles.sidebarPanel}>
            <div className={styles.panelHeader}>
              <h3 className={styles.panelTitle}>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</h3>
            </div>
            <div className={styles.panelContent}>
              <div className={styles.sortDropdown}>
                <button
                  className={`${styles.sortToggle} ${sortDropdownOpen ? styles.open : ''}`}
                  onClick={toggleSortDropdown}
                >
                  <span className={styles.sortLabel}>{getSortLabel(sortBy)}</span>
                  <span className={styles.dropdownArrow}>
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                      <path d="M4 6l4 4 4-4" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                  </span>
                </button>
                
                {sortDropdownOpen && (
                  <div 
                    className={styles.sortDropdownMenu}
                    style={{
                      top: `${dropdownPosition.top}px`,
                      left: `${dropdownPosition.left}px`,
                      width: `${dropdownPosition.width}px`
                    }}
                  >
                    <button
                      className={`${styles.sortOption} ${sortBy === 'category' ? styles.active : ''}`}
                      onClick={() => handleSortChange('category')}
                    >
                      –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    </button>
                    <button
                      className={`${styles.sortOption} ${sortBy === 'alphabet' ? styles.active : ''}`}
                      onClick={() => handleSortChange('alphabet')}
                    >
                      –ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
                    </button>
                    <button
                      className={`${styles.sortOption} ${sortBy === 'new' ? styles.active : ''}`}
                      onClick={() => handleSortChange('new')}
                    >
                      –ù–æ–≤–∏–Ω–∫–∏ –∏ —Ö–∏—Ç—ã
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </aside>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <main className={styles.mainContent}>
          {/* –ü–æ–∏—Å–∫ */}
          <div className={styles.searchSection}>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –±–ª—é–¥..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className={styles.searchInput}
            />
          </div>

          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ */}
          <div className={styles.sectionHeader}>
            <h2>–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</h2>
            {searchQuery && (
              <p className={styles.searchInfo}>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "{searchQuery}"</p>
            )}
          </div>

          {/* –ë–ª—é–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
          {dishesLoading ? (
            <div className={styles.dishesLoading}>
              <LoadingSpinner />
            </div>
          ) : (
            <div className={styles.menuSections}>
              {dishes.length > 0 ? (
                // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –±–ª—é–¥–∞ –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∫–µ
                searchQuery ? (
                  <div className={styles.dishesGrid}>
                    {sortDishes(dishes).map((dish) => {
                      const dishCategory = categories.find(cat => cat.id === dish.category_id)
                      return (
                        <DishCard 
                          key={dish.id} 
                          dish={dish} 
                          category={dishCategory}
                          onAddToCart={handleAddToCart}
                          isInCart={isInCart}
                          getItemQuantity={getItemQuantity}
                          formatPrice={formatPrice}
                          createPlaceholderImage={createPlaceholderImage}
                        />
                      )
                    })}
                  </div>
                ) : (
                  // –ò–Ω–∞—á–µ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                  groupDishesByCategory(dishes).map((group) => (
                    <div key={group.category.id} className={styles.categorySection}>
                      <div 
                        id={`category-${group.category.id}`}
                        className={styles.categoryHeader}
                      >
                        <h3 className={styles.categoryTitle}>{group.category.name}</h3>
                        {group.category.description && (
                          <p className={styles.categoryDescription}>{group.category.description}</p>
                        )}
                      </div>
                      
                      <div className={styles.dishesGrid}>
                        {group.dishes.map((dish) => (
                          <DishCard 
                            key={dish.id} 
                            dish={dish} 
                            category={group.category}
                            onAddToCart={handleAddToCart}
                            isInCart={isInCart}
                            getItemQuantity={getItemQuantity}
                            formatPrice={formatPrice}
                            createPlaceholderImage={createPlaceholderImage}
                          />
                        ))}
                      </div>
                    </div>
                  ))
                )
              ) : (
                <div className={styles.noDishes}>
                  <p>–ë–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                </div>
              )}
            </div>
          )}
        </main>
      </div>
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –±–ª—é–¥–∞
function DishCard({ dish, category, onAddToCart, isInCart, getItemQuantity, formatPrice, createPlaceholderImage }) {
  return (
    <div className={styles.dishCard}>
      <div className={styles.dishImage}>
        <img 
          src={dish.image || createPlaceholderImage(category?.name || dish.name)} 
          alt={dish.name}
          onError={(e) => {
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ä–∞–∑
            const placeholderSrc = createPlaceholderImage(category?.name || dish.name)
            if (e.target.src !== placeholderSrc && !e.target.dataset.retried && dish.image) {
              e.target.dataset.retried = 'true'
              console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è: ${dish.name}`)
              // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
              setTimeout(() => {
                e.target.src = dish.image
              }, 1000)
            } else {
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
              console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: ${dish.name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder`)
              e.target.src = placeholderSrc
            }
          }}
          onLoad={(e) => {
            // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            delete e.target.dataset.retried
          }}
        />
        {dish.is_popular && (
          <div className={styles.popularBadge}>–•–∏—Ç</div>
        )}
      </div>
      
      <div className={styles.dishInfo}>
        <h3 className={styles.dishName}>{dish.name}</h3>
        
        {dish.description && (
          <p className={styles.dishDescription}>{dish.description}</p>
        )}
        
        <div className={styles.dishMeta}>
          {dish.weight && (
            <span className={styles.dishWeight}>{dish.weight}</span>
          )}
        </div>
        
        <div className={styles.dishFooter}>
          <div className={styles.dishPrice}>
            {formatPrice(dish.price)}
          </div>
          
          <button
            onClick={() => onAddToCart(dish)}
            className={`${styles.addToCartBtn} ${isInCart(dish.id) ? styles.inCart : ''}`}
            disabled={!dish.is_available}
          >
            {!dish.is_available ? '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ' :
             isInCart(dish.id) ? `–í –∫–æ—Ä–∑–∏–Ω–µ (${getItemQuantity(dish.id)})` : '–î–æ–±–∞–≤–∏—Ç—å'}
          </button>
        </div>
      </div>
    </div>
  )
}

export default MenuPage