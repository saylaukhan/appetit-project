import React, { useState, useEffect } from 'react'
import { 
  Clock, 
  CheckCircle, 
  AlertTriangle, 
  Users,
  ChefHat,
  Timer,
  Bell,
  RefreshCw
} from 'lucide-react'
import { kitchenAPI } from '../../services/api'
import LoadingSpinner from '../../components/common/LoadingSpinner'
import styles from './KitchenDashboard.module.css'

function KitchenDashboard() {
  const [orders, setOrders] = useState([])
  const [loading, setLoading] = useState(true)
  const [currentTime, setCurrentTime] = useState(new Date())
  const [stats, setStats] = useState({
    pending: 0,
    cooking: 0,
    ready: 0,
    avgTime: 0
  })

  useEffect(() => {
    fetchKitchenOrders()
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    const timeInterval = setInterval(() => {
      setCurrentTime(new Date())
    }, 1000)

    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const ordersInterval = setInterval(() => {
      fetchKitchenOrders()
    }, 30000)

    return () => {
      clearInterval(timeInterval)
      clearInterval(ordersInterval)
    }
  }, [])

  useEffect(() => {
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤
    const pending = orders.filter(order => order.status === 'pending').length
    const cooking = orders.filter(order => order.status === 'cooking').length
    const ready = orders.filter(order => order.status === 'ready').length
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    const cookingOrders = orders.filter(order => order.status === 'cooking')
    const avgTime = cookingOrders.length > 0 
      ? cookingOrders.reduce((sum, order) => sum + getElapsedMinutes(order.cookingStarted), 0) / cookingOrders.length
      : 0

    setStats({ pending, cooking, ready, avgTime: Math.round(avgTime) })
  }, [orders])

  const fetchKitchenOrders = async () => {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤
      // const response = await kitchenAPI.getKitchenOrders()
      
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const mockOrders = [
        {
          id: 1,
          orderNumber: '0001',
          customer: '–ê–π–≥—É–ª—å –ö.',
          items: [
            { name: '–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', quantity: 1, notes: '–ë–µ–∑ –ª—É–∫–∞' },
            { name: '–ö–æ–∫–∞-–ö–æ–ª–∞ 0.5–ª', quantity: 2, notes: '' }
          ],
          status: 'pending',
          priority: 'normal',
          deliveryType: 'delivery',
          createdAt: new Date(Date.now() - 1000 * 60 * 8).toISOString(),
          estimatedTime: 25,
          tableNumber: null
        },
        {
          id: 2,
          orderNumber: '0002', 
          customer: '–ê—Ä–º–∞–Ω –¢.',
          items: [
            { name: '–ë—É—Ä–≥–µ—Ä –ö–ª–∞—Å—Å–∏–∫', quantity: 2, notes: '–°—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–∂–∞—Ä–∫–∏' },
            { name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏', quantity: 1, notes: '–ë–µ–∑ —Å–æ–ª–∏' }
          ],
          status: 'cooking',
          priority: 'high',
          deliveryType: 'delivery',
          createdAt: new Date(Date.now() - 1000 * 60 * 25).toISOString(),
          cookingStarted: new Date(Date.now() - 1000 * 60 * 12).toISOString(),
          estimatedTime: 15,
          tableNumber: null
        },
        {
          id: 3,
          orderNumber: '0003',
          customer: '–ñ–∞–Ω–∞—Ä –°.',
          items: [
            { name: '–†–æ–ª–ª –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è', quantity: 3, notes: '' },
            { name: '–ó–µ–ª–µ–Ω—ã–π —á–∞–π', quantity: 1, notes: '–ì–æ—Ä—è—á–∏–π' }
          ],
          status: 'ready',
          priority: 'normal',
          deliveryType: 'pickup',
          createdAt: new Date(Date.now() - 1000 * 60 * 45).toISOString(),
          cookingStarted: new Date(Date.now() - 1000 * 60 * 22).toISOString(),
          completedAt: new Date(Date.now() - 1000 * 60 * 2).toISOString(),
          estimatedTime: 20,
          tableNumber: null
        },
        {
          id: 4,
          orderNumber: '0004',
          customer: '–°—Ç–æ–ª ‚Ññ12',
          items: [
            { name: '–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å', quantity: 1, notes: '–ë–µ–∑ —Å—É—Ö–∞—Ä–∏–∫–æ–≤' },
            { name: '–ë–æ—Ä—â —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π', quantity: 1, notes: '' }
          ],
          status: 'cooking',
          priority: 'normal',
          deliveryType: 'dine_in',
          createdAt: new Date(Date.now() - 1000 * 60 * 18).toISOString(),
          cookingStarted: new Date(Date.now() - 1000 * 60 * 8).toISOString(),
          estimatedTime: 12,
          tableNumber: 12
        }
      ]
      
      setOrders(mockOrders)
      setLoading(false)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ö–Ω–∏:', error)
      setLoading(false)
    }
  }

  const updateOrderStatus = async (orderId, newStatus) => {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤
      // await kitchenAPI.updateOrderStatus(orderId, newStatus)
      
      const now = new Date().toISOString()
      setOrders(prev => prev.map(order => {
        if (order.id === orderId) {
          const updates = { status: newStatus }
          
          if (newStatus === 'cooking' && order.status === 'pending') {
            updates.cookingStarted = now
          } else if (newStatus === 'ready') {
            updates.completedAt = now
          }
          
          return { ...order, ...updates }
        }
        return order
      }))
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error)
    }
  }

  const getElapsedMinutes = (startTime) => {
    if (!startTime) return 0
    const elapsed = (new Date() - new Date(startTime)) / 1000 / 60
    return Math.floor(elapsed)
  }

  const getOrderElapsed = (order) => {
    if (order.status === 'ready' && order.completedAt) {
      return getElapsedMinutes(order.cookingStarted)
    }
    if (order.status === 'cooking' && order.cookingStarted) {
      return getElapsedMinutes(order.cookingStarted)
    }
    return getElapsedMinutes(order.createdAt)
  }

  const getPriorityClass = (priority) => {
    switch (priority) {
      case 'high': return styles.priorityHigh
      case 'normal': return styles.priorityNormal
      case 'low': return styles.priorityLow
      default: return styles.priorityNormal
    }
  }

  const getStatusColor = (status) => {
    switch (status) {
      case 'pending': return styles.statusPending
      case 'cooking': return styles.statusCooking
      case 'ready': return styles.statusReady
      default: return styles.statusPending
    }
  }

  const getDeliveryTypeIcon = (deliveryType) => {
    switch (deliveryType) {
      case 'delivery': return 'üöó'
      case 'pickup': return 'üö∂'
      case 'dine_in': return 'üè†'
      default: return 'üì¶'
    }
  }

  if (loading) {
    return <LoadingSpinner />
  }

  return (
    <div className={styles.kitchenDashboard}>
      {/* Header */}
      <div className={styles.header}>
        <div className={styles.headerLeft}>
          <ChefHat className={styles.headerIcon} />
          <div>
            <h1>Kitchen Display System</h1>
            <p>{currentTime.toLocaleTimeString()}</p>
          </div>
        </div>
        
        <div className={styles.headerRight}>
          <button 
            className={styles.refreshButton}
            onClick={() => fetchKitchenOrders()}
          >
            <RefreshCw size={18} />
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
      </div>

      {/* Stats */}
      <div className={styles.stats}>
        <div className={styles.statCard}>
          <Clock className={styles.statIcon} />
          <div>
            <div className={styles.statNumber}>{stats.pending}</div>
            <div className={styles.statLabel}>–û–∂–∏–¥–∞—é—Ç</div>
          </div>
        </div>
        
        <div className={styles.statCard}>
          <ChefHat className={styles.statIcon} />
          <div>
            <div className={styles.statNumber}>{stats.cooking}</div>
            <div className={styles.statLabel}>–ì–æ—Ç–æ–≤—è—Ç—Å—è</div>
          </div>
        </div>
        
        <div className={styles.statCard}>
          <CheckCircle className={styles.statIcon} />
          <div>
            <div className={styles.statNumber}>{stats.ready}</div>
            <div className={styles.statLabel}>–ì–æ—Ç–æ–≤—ã</div>
          </div>
        </div>
        
        <div className={styles.statCard}>
          <Timer className={styles.statIcon} />
          <div>
            <div className={styles.statNumber}>{stats.avgTime}–º</div>
            <div className={styles.statLabel}>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</div>
          </div>
        </div>
      </div>

      {/* Orders Grid */}
      <div className={styles.ordersContainer}>
        <div className={styles.ordersColumn}>
          <h2 className={styles.columnTitle}>
            <Clock size={20} />
            –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã ({stats.pending})
          </h2>
          {orders.filter(order => order.status === 'pending').map(order => (
            <OrderCard
              key={order.id}
              order={order}
              onStatusChange={updateOrderStatus}
              getElapsedMinutes={() => getElapsedMinutes(order.createdAt)}
              getPriorityClass={getPriorityClass}
              getDeliveryTypeIcon={getDeliveryTypeIcon}
              styles={styles}
            />
          ))}
        </div>

        <div className={styles.ordersColumn}>
          <h2 className={styles.columnTitle}>
            <ChefHat size={20} />
            –í –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏ ({stats.cooking})
          </h2>
          {orders.filter(order => order.status === 'cooking').map(order => (
            <OrderCard
              key={order.id}
              order={order}
              onStatusChange={updateOrderStatus}
              getElapsedMinutes={() => getElapsedMinutes(order.cookingStarted)}
              getPriorityClass={getPriorityClass}
              getDeliveryTypeIcon={getDeliveryTypeIcon}
              styles={styles}
              showCookingTimer={true}
            />
          ))}
        </div>

        <div className={styles.ordersColumn}>
          <h2 className={styles.columnTitle}>
            <CheckCircle size={20} />
            –ì–æ—Ç–æ–≤—ã –∫ –≤—ã–¥–∞—á–µ ({stats.ready})
          </h2>
          {orders.filter(order => order.status === 'ready').map(order => (
            <OrderCard
              key={order.id}
              order={order}
              onStatusChange={updateOrderStatus}
              getElapsedMinutes={() => getElapsedMinutes(order.completedAt)}
              getPriorityClass={getPriorityClass}
              getDeliveryTypeIcon={getDeliveryTypeIcon}
              styles={styles}
              isReady={true}
            />
          ))}
        </div>
      </div>
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞
function OrderCard({ 
  order, 
  onStatusChange, 
  getElapsedMinutes, 
  getPriorityClass, 
  getDeliveryTypeIcon,
  styles,
  showCookingTimer = false,
  isReady = false
}) {
  const elapsed = getElapsedMinutes()
  const isOvertime = elapsed > order.estimatedTime

  return (
    <div className={`${styles.orderCard} ${getPriorityClass(order.priority)}`}>
      <div className={styles.orderHeader}>
        <div className={styles.orderInfo}>
          <span className={styles.orderNumber}>#{order.orderNumber}</span>
          <span className={styles.deliveryType}>
            {getDeliveryTypeIcon(order.deliveryType)}
          </span>
        </div>
        
        <div className={styles.orderTime}>
          <span className={`${styles.elapsed} ${isOvertime ? styles.overtime : ''}`}>
            {elapsed}–º
          </span>
          <span className={styles.estimated}>/ {order.estimatedTime}–º</span>
        </div>
      </div>

      <div className={styles.customer}>
        {order.tableNumber ? `–°—Ç–æ–ª ‚Ññ${order.tableNumber}` : order.customer}
      </div>

      <div className={styles.orderItems}>
        {order.items.map((item, index) => (
          <div key={index} className={styles.orderItem}>
            <span className={styles.itemQuantity}>{item.quantity}x</span>
            <span className={styles.itemName}>{item.name}</span>
            {item.notes && (
              <div className={styles.itemNotes}>üìù {item.notes}</div>
            )}
          </div>
        ))}
      </div>

      <div className={styles.orderActions}>
        {order.status === 'pending' && (
          <button
            className={`${styles.actionButton} ${styles.startButton}`}
            onClick={() => onStatusChange(order.id, 'cooking')}
          >
            <ChefHat size={16} />
            –ù–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å
          </button>
        )}
        
        {order.status === 'cooking' && (
          <button
            className={`${styles.actionButton} ${styles.readyButton}`}
            onClick={() => onStatusChange(order.id, 'ready')}
          >
            <CheckCircle size={16} />
            –ì–æ—Ç–æ–≤–æ
          </button>
        )}

        {isReady && (
          <div className={styles.readyIndicator}>
            <Bell className={styles.bellIcon} />
            –ö –≤—ã–¥–∞—á–µ!
          </div>
        )}
      </div>
    </div>
  )
}

export default KitchenDashboard