import React, { useState, useEffect } from 'react'
import { X, Upload, Calendar, MapPin, Eye, BarChart3, Link } from 'lucide-react'
import { marketingAPI } from '../../services/api'
import { toast } from 'react-hot-toast'
import styles from './BannerModal.module.css'

const BannerModal = ({ isOpen, onClose, onSuccess, editingBanner = null }) => {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    image: '',
    link: '',
    position: 'main',
    sort_order: 1,
    is_active: true,
    show_from: '',
    show_until: ''
  })
  
  const [loading, setLoading] = useState(false)
  const [imagePreview, setImagePreview] = useState('')

  // –ü–æ–∑–∏—Ü–∏–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤ —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
  const positions = [
    { value: 'main', label: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', color: '#e74c3c', icon: 'üè†' },
    { value: 'hero', label: '–ì–µ—Ä–æ–∏—á–µ—Å–∫–∏–π –±–∞–Ω–Ω–µ—Ä', color: '#9b59b6', icon: '‚≠ê' },
    { value: 'featured', label: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ', color: '#3498db', icon: 'üëç' },
    { value: 'category', label: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', color: '#f39c12', icon: 'üìÇ' },
    { value: 'cart', label: '–ö–æ—Ä–∑–∏–Ω–∞', color: '#27ae60', icon: 'üõí' },
    { value: 'checkout', label: '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞', color: '#e67e22', icon: 'üí≥' },
    { value: 'popup', label: '–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ', color: '#e74c3c', icon: '‚ö†Ô∏è' },
    { value: 'notification', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', color: '#34495e', icon: 'üîî' }
  ]

  useEffect(() => {
    if (editingBanner) {
      setFormData({
        title: editingBanner.title || '',
        description: editingBanner.description || '',
        image: editingBanner.image || '',
        link: editingBanner.link || '',
        position: editingBanner.position || 'main',
        sort_order: editingBanner.sort_order || 1,
        is_active: editingBanner.is_active || true,
        show_from: editingBanner.show_from ? editingBanner.show_from.split('T')[0] : '',
        show_until: editingBanner.show_until ? editingBanner.show_until.split('T')[0] : ''
      })
      setImagePreview(editingBanner.image || '')
    } else {
      setFormData({
        title: '',
        description: '',
        image: '',
        link: '',
        position: 'main',
        sort_order: 1,
        is_active: true,
        show_from: '',
        show_until: ''
      })
      setImagePreview('')
    }
  }, [editingBanner, isOpen])

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }))
  }

  const handleImageChange = (e) => {
    const value = e.target.value
    setFormData(prev => ({ ...prev, image: value }))
    setImagePreview(value)
  }

  const validateForm = () => {
    if (!formData.title.trim()) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞')
      return false
    }
    if (!formData.position) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –±–∞–Ω–Ω–µ—Ä–∞')
      return false
    }
    if (formData.show_from && formData.show_until && formData.show_from > formData.show_until) {
      toast.error('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è')
      return false
    }
    return true
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    if (!validateForm()) return

    setLoading(true)
    
    try {
      const bannerData = {
        ...formData,
        sort_order: parseInt(formData.sort_order) || 1,
        show_from: formData.show_from ? new Date(formData.show_from).toISOString() : null,
        show_until: formData.show_until ? new Date(formData.show_until).toISOString() : null
      }

      if (editingBanner) {
        await marketingAPI.updateBanner(editingBanner.id, bannerData)
        toast.success('–ë–∞–Ω–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
      } else {
        await marketingAPI.createBanner(bannerData)
        toast.success('–ë–∞–Ω–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
      }

      onSuccess()
      onClose()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞:', error)
      toast.error(
        error.response?.data?.detail || 
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞'
      )
    } finally {
      setLoading(false)
    }
  }

  const getPositionStyle = (positionValue) => {
    const position = positions.find(p => p.value === positionValue)
    return position ? { backgroundColor: position.color, color: 'white' } : {}
  }

  if (!isOpen) return null

  return (
    <div className={styles.modalOverlay} onClick={onClose}>
      <div className={styles.modalContent} onClick={e => e.stopPropagation()}>
        <div className={styles.modalHeader}>
          <div className={styles.modalTitle}>
            <BarChart3 className={styles.titleIcon} />
            <h2>{editingBanner ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω–Ω–µ—Ä' : '–°–æ–∑–¥–∞—Ç—å –±–∞–Ω–Ω–µ—Ä'}</h2>
          </div>
          <button 
            className={styles.closeButton}
            onClick={onClose}
            disabled={loading}
          >
            <X size={20} />
          </button>
        </div>

        <form onSubmit={handleSubmit} className={styles.modalForm}>
          {/* –ü—Ä–µ–≤—å—é –±–∞–Ω–Ω–µ—Ä–∞ */}
          {imagePreview && (
            <div className={styles.previewSection}>
              <div className={styles.previewLabel}>–ü—Ä–µ–≤—å—é –±–∞–Ω–Ω–µ—Ä–∞</div>
              <div 
                className={styles.bannerPreview}
                style={getPositionStyle(formData.position)}
              >
                {imagePreview.startsWith('http') ? (
                  <img src={imagePreview} alt="–ü—Ä–µ–≤—å—é" className={styles.previewImage} />
                ) : (
                  <div className={styles.previewPlaceholder}>
                    <Upload size={24} />
                    <span>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</span>
                  </div>
                )}
                <div className={styles.previewContent}>
                  <h3>{formData.title || '–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞'}</h3>
                  <p>{formData.description || '–û–ø–∏—Å–∞–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞'}</p>
                </div>
              </div>
            </div>
          )}

          <div className={styles.formGrid}>
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className={styles.formSection}>
              <h3>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
              
              <div className={styles.formField}>
                <label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞ *</label>
                <input
                  type="text"
                  id="title"
                  name="title"
                  value={formData.title}
                  onChange={handleInputChange}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∫–∏–¥–∫–∞ 50% –Ω–∞ –ø–∏—Ü—Ü—É"
                  required
                />
              </div>

              <div className={styles.formField}>
                <label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                  id="description"
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
                  rows="3"
                />
              </div>

              <div className={styles.formField}>
                <label htmlFor="image">
                  <Upload size={16} />
                  URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                </label>
                <input
                  type="url"
                  id="image"
                  name="image"
                  value={formData.image}
                  onChange={handleImageChange}
                  placeholder="https://example.com/image.jpg"
                />
              </div>

              <div className={styles.formField}>
                <label htmlFor="link">
                  <Link size={16} />
                  –°—Å—ã–ª–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
                </label>
                <input
                  type="text"
                  id="link"
                  name="link"
                  value={formData.link}
                  onChange={handleInputChange}
                  placeholder="/menu/pizza –∏–ª–∏ https://external-link.com"
                />
              </div>
            </div>

            {/* –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ */}
            <div className={styles.formSection}>
              <h3>–†–∞–∑–º–µ—â–µ–Ω–∏–µ</h3>
              
              <div className={styles.formField}>
                <label htmlFor="position">
                  <MapPin size={16} />
                  –ü–æ–∑–∏—Ü–∏—è –ø–æ–∫–∞–∑–∞ *
                </label>
                <select
                  id="position"
                  name="position"
                  value={formData.position}
                  onChange={handleInputChange}
                  required
                >
                  {positions.map(pos => (
                    <option key={pos.value} value={pos.value}>
                      {pos.icon} {pos.label}
                    </option>
                  ))}
                </select>
                <div className={styles.positionPreview} style={getPositionStyle(formData.position)}>
                  {positions.find(p => p.value === formData.position)?.icon} 
                  {positions.find(p => p.value === formData.position)?.label}
                </div>
              </div>

              <div className={styles.formField}>
                <label htmlFor="sort_order">–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏</label>
                <input
                  type="number"
                  id="sort_order"
                  name="sort_order"
                  value={formData.sort_order}
                  onChange={handleInputChange}
                  min="1"
                  max="100"
                />
                <small>–ú–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ = –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º</small>
              </div>

              <div className={styles.checkboxField}>
                <label className={styles.checkboxLabel}>
                  <input
                    type="checkbox"
                    name="is_active"
                    checked={formData.is_active}
                    onChange={handleInputChange}
                  />
                  <span className={styles.checkmark}>
                    <Eye size={14} />
                  </span>
                  –ê–∫—Ç–∏–≤–Ω—ã–π –±–∞–Ω–Ω–µ—Ä
                </label>
              </div>
            </div>

            {/* –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è */}
            <div className={styles.formSection}>
              <h3>–í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞</h3>
              
              <div className={styles.dateGrid}>
                <div className={styles.formField}>
                  <label htmlFor="show_from">
                    <Calendar size={16} />
                    –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å
                  </label>
                  <input
                    type="date"
                    id="show_from"
                    name="show_from"
                    value={formData.show_from}
                    onChange={handleInputChange}
                  />
                </div>

                <div className={styles.formField}>
                  <label htmlFor="show_until">
                    <Calendar size={16} />
                    –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ
                  </label>
                  <input
                    type="date"
                    id="show_until"
                    name="show_until"
                    value={formData.show_until}
                    onChange={handleInputChange}
                  />
                </div>
              </div>
              
              <small>–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞</small>
            </div>
          </div>

          <div className={styles.modalActions}>
            <button
              type="button"
              className={styles.cancelButton}
              onClick={onClose}
              disabled={loading}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className={styles.saveButton}
              disabled={loading}
            >
              {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : editingBanner ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

export default BannerModal