import React from 'react'
import { 
  Edit3, 
  Trash2, 
  Eye, 
  EyeOff, 
  ExternalLink, 
  BarChart3,
  Calendar,
  MapPin,
  MousePointer,
  TrendingUp
} from 'lucide-react'
import { toast } from 'react-hot-toast'
import styles from './BannerCard.module.css'

const BannerCard = ({ 
  banner, 
  onEdit, 
  onDelete, 
  onToggleStatus,
  onTrackView,
  onTrackClick 
}) => {

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏
  const getPositionColor = (position) => {
    const colors = {
      main: '#e74c3c',
      hero: '#9b59b6', 
      featured: '#3498db',
      category: '#f39c12',
      cart: '#27ae60',
      checkout: '#e67e22',
      popup: '#e74c3c',
      notification: '#34495e'
    }
    return colors[position] || '#6c757d'
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
  const getPositionIcon = (position) => {
    const icons = {
      main: 'üè†',
      hero: '‚≠ê',
      featured: 'üëç',
      category: 'üìÇ',
      cart: 'üõí',
      checkout: 'üí≥',
      popup: '‚ö†Ô∏è',
      notification: 'üîî'
    }
    return icons[position] || 'üìç'
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
  const getPositionName = (position) => {
    const names = {
      main: '–ì–ª–∞–≤–Ω–∞—è',
      hero: '–ì–µ—Ä–æ–∏—á–µ—Å–∫–∏–π',
      featured: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π',
      category: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
      cart: '–ö–æ—Ä–∑–∏–Ω–∞',
      checkout: '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ',
      popup: '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ',
      notification: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
    }
    return names[position] || position
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    if (!dateString) return null
    return new Date(dateString).toLocaleDateString('ru-RU')
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ CTR
  const calculateCTR = () => {
    if (!banner.view_count || banner.view_count === 0) return 0
    return ((banner.click_count / banner.view_count) * 100).toFixed(1)
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const getTimeStatus = () => {
    const now = new Date()
    const showFrom = banner.show_from ? new Date(banner.show_from) : null
    const showUntil = banner.show_until ? new Date(banner.show_until) : null

    if (showFrom && now < showFrom) {
      return { status: 'scheduled', text: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω', color: '#f39c12' }
    }
    if (showUntil && now > showUntil) {
      return { status: 'expired', text: '–ò—Å—Ç–µ–∫', color: '#e74c3c' }
    }
    if (banner.is_active) {
      return { status: 'active', text: '–ê–∫—Ç–∏–≤–µ–Ω', color: '#27ae60' }
    }
    return { status: 'inactive', text: '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω', color: '#6c757d' }
  }

  const timeStatus = getTimeStatus()

  const handleEdit = () => {
    onEdit(banner)
  }

  const handleDelete = () => {
    if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–∞–Ω–Ω–µ—Ä "${banner.title}"?`)) {
      onDelete(banner.id)
    }
  }

  const handleToggleStatus = () => {
    onToggleStatus(banner.id, banner.is_active)
  }

  const handleViewClick = () => {
    if (onTrackView) {
      onTrackView(banner.id)
      toast.success('–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Å—á–∏—Ç–∞–Ω')
    }
  }

  const handleLinkClick = () => {
    if (banner.link) {
      if (onTrackClick) {
        onTrackClick(banner.id)
      }
      if (banner.link.startsWith('http')) {
        window.open(banner.link, '_blank')
      } else {
        console.log('–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ:', banner.link)
        toast.success(`–ü–µ—Ä–µ—Ö–æ–¥: ${banner.link}`)
      }
    }
  }

  return (
    <div className={`${styles.bannerCard} ${!banner.is_active ? styles.inactive : ''}`}>
      {/* Header with status */}
      <div className={styles.cardHeader}>
        <div 
          className={styles.position}
          style={{ backgroundColor: getPositionColor(banner.position) }}
        >
          <span className={styles.positionIcon}>{getPositionIcon(banner.position)}</span>
          <span className={styles.positionText}>{getPositionName(banner.position)}</span>
        </div>
        
        <div 
          className={styles.status}
          style={{ color: timeStatus.color }}
        >
          <div className={styles.statusDot} style={{ backgroundColor: timeStatus.color }} />
          {timeStatus.text}
        </div>
      </div>

      {/* Banner preview */}
      <div 
        className={styles.bannerPreview}
        style={{ backgroundColor: getPositionColor(banner.position) }}
        onClick={handleViewClick}
      >
        {banner.image ? (
          <div className={styles.bannerImage}>
            <img src={banner.image} alt={banner.title} />
          </div>
        ) : (
          <div className={styles.bannerPlaceholder}>
            <Eye size={24} />
            <span>–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</span>
          </div>
        )}
        
        <div className={styles.bannerContent}>
          <h3 className={styles.bannerTitle}>{banner.title}</h3>
          {banner.description && (
            <p className={styles.bannerDescription}>{banner.description}</p>
          )}
          
          {banner.link && (
            <button 
              className={styles.linkButton}
              onClick={(e) => {
                e.stopPropagation()
                handleLinkClick()
              }}
            >
              <ExternalLink size={14} />
              –ü–µ—Ä–µ–π—Ç–∏
            </button>
          )}
        </div>
      </div>

      {/* Stats */}
      <div className={styles.stats}>
        <div className={styles.stat}>
          <Eye size={14} />
          <span className={styles.statValue}>{banner.view_count || 0}</span>
          <span className={styles.statLabel}>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã</span>
        </div>
        
        <div className={styles.stat}>
          <MousePointer size={14} />
          <span className={styles.statValue}>{banner.click_count || 0}</span>
          <span className={styles.statLabel}>–ö–ª–∏–∫–∏</span>
        </div>
        
        <div className={styles.stat}>
          <TrendingUp size={14} />
          <span className={styles.statValue}>{calculateCTR()}%</span>
          <span className={styles.statLabel}>CTR</span>
        </div>
      </div>

      {/* Details */}
      <div className={styles.details}>
        <div className={styles.detailRow}>
          <span>–ü–æ—Ä—è–¥–æ–∫:</span>
          <span>#{banner.sort_order}</span>
        </div>
        
        {banner.show_from && (
          <div className={styles.detailRow}>
            <Calendar size={12} />
            <span>–° {formatDate(banner.show_from)}</span>
          </div>
        )}
        
        {banner.show_until && (
          <div className={styles.detailRow}>
            <Calendar size={12} />
            <span>–î–æ {formatDate(banner.show_until)}</span>
          </div>
        )}
      </div>

      {/* Actions */}
      <div className={styles.actions}>
        <button 
          className={styles.actionButton}
          onClick={handleEdit}
          title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
        >
          <Edit3 size={16} />
        </button>
        
        <button 
          className={`${styles.actionButton} ${banner.is_active ? styles.disableButton : styles.enableButton}`}
          onClick={handleToggleStatus}
          title={banner.is_active ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
        >
          {banner.is_active ? <EyeOff size={16} /> : <Eye size={16} />}
        </button>
        
        <button 
          className={`${styles.actionButton} ${styles.statsButton}`}
          onClick={() => window.open(`#/admin/marketing/banners/${banner.id}/stats`, '_blank')}
          title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        >
          <BarChart3 size={16} />
        </button>
        
        <button 
          className={`${styles.actionButton} ${styles.deleteButton}`}
          onClick={handleDelete}
          title="–£–¥–∞–ª–∏—Ç—å"
        >
          <Trash2 size={16} />
        </button>
      </div>
    </div>
  )
}

export default BannerCard