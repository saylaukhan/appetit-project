import React, { useState, useEffect } from 'react'
import { 
  Users, Search, Filter, Edit3, UserCheck, UserX, Shield, 
  Phone, Mail, MapPin, Calendar, Package, Eye, MoreVertical,
  ChevronLeft, ChevronRight, RefreshCw, X
} from 'lucide-react'
import userService from '../../services/userService'
import Toast from '../common/Toast'
import ConfirmModal from '../common/ConfirmModal'
import styles from './UsersTable.module.css'

const ROLES = {
  client: { label: '–ö–ª–∏–µ–Ω—Ç', color: '#10b981', icon: Users },
  admin: { label: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', color: '#dc2626', icon: Shield },
  kitchen: { label: '–ö—É—Ö–Ω—è', color: '#f59e0b', icon: UserCheck },
  courier: { label: '–ö—É—Ä—å–µ—Ä', color: '#3b82f6', icon: UserX }
}

function UsersTable() {
  const [users, setUsers] = useState([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [roleFilter, setRoleFilter] = useState('')
  const [statusFilter, setStatusFilter] = useState('')
  const [currentPage, setCurrentPage] = useState(1)
  const [totalPages, setTotalPages] = useState(0)
  const [totalUsers, setTotalUsers] = useState(0)
  const [perPage] = useState(15)
  const [selectedUser, setSelectedUser] = useState(null)
  const [showRoleModal, setShowRoleModal] = useState(false)
  const [showStatusModal, setShowStatusModal] = useState(false)
  const [actionLoading, setActionLoading] = useState(null)
  const [toast, setToast] = useState({ isVisible: false, message: '', type: 'success' })

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const fetchUsers = async (page = currentPage, search = searchTerm, role = roleFilter, status = statusFilter) => {
    try {
      console.log('üöÄ UsersTable: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', { page, search, role, status, perPage })
      setLoading(true)
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è API
      let isActiveFilter = null
      if (status === 'active') isActiveFilter = true
      if (status === 'inactive') isActiveFilter = false
      
      const data = await userService.getUsers(page, perPage, search, role, isActiveFilter)
      console.log('üì¶ UsersTable: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data)
      
      setUsers(data.users || [])
      setTotalPages(data.total_pages || 0)
      setTotalUsers(data.total || 0)
      setCurrentPage(data.page || 1)
      
      console.log('‚úÖ UsersTable: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', {
        usersCount: data.users?.length || 0,
        totalUsers: data.total || 0,
        totalPages: data.total_pages || 0,
        currentPage: data.page || 1
      })
      
    } catch (error) {
      console.error('‚ùå UsersTable: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
      if (error.response) {
        console.error('‚ùå UsersTable: HTTP Error:', {
          status: error.response.status,
          statusText: error.response.statusText,
          data: error.response.data
        })
        
        if (error.response.status === 401) {
          showToast('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'error')
        } else if (error.response.status === 403) {
          showToast('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error')
        } else {
          showToast(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.response.status}`, 'error')
        }
      } else if (error.request) {
        console.error('‚ùå UsersTable: Network Error:', error.request)
        showToast('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error')
      } else {
        console.error('‚ùå UsersTable: Unknown Error:', error.message)
        showToast('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'error')
      }
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchUsers()
  }, [])

  // –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã —Å debounce
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      fetchUsers(1, searchTerm, roleFilter, statusFilter)
    }, 500)

    return () => clearTimeout(timeoutId)
  }, [searchTerm, roleFilter, statusFilter])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleResetFilters = () => {
    setSearchTerm('')
    setRoleFilter('')
    setStatusFilter('')
    setCurrentPage(1)
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const hasActiveFilters = searchTerm || roleFilter || statusFilter

  const showToast = (message, type = 'success') => {
    setToast({ isVisible: true, message, type })
  }

  const hideToast = () => {
    setToast({ isVisible: false, message: '', type: 'success' })
  }

  // –°–º–µ–Ω–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleRoleChange = async (newRole) => {
    if (!selectedUser) return

    try {
      setActionLoading('role')
      await userService.updateUserRole(selectedUser.id, newRole)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ
      setUsers(prevUsers => 
        prevUsers.map(user => 
          user.id === selectedUser.id 
            ? { ...user, role: newRole }
            : user
        )
      )
      
      showToast(`–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "${ROLES[newRole].label}"`)
      setShowRoleModal(false)
      setSelectedUser(null)
    } catch (error) {
      console.error('Error updating user role:', error)
      showToast('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏', 'error')
    } finally {
      setActionLoading(null)
    }
  }

  // –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleStatusChange = async (isActive) => {
    if (!selectedUser) return

    try {
      setActionLoading('status')
      await userService.updateUserStatus(selectedUser.id, isActive)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ
      setUsers(prevUsers => 
        prevUsers.map(user => 
          user.id === selectedUser.id 
            ? { ...user, is_active: isActive }
            : user
        )
      )
      
      const action = isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
      showToast(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${action}`)
      setShowStatusModal(false)
      setSelectedUser(null)
    } catch (error) {
      console.error('Error updating user status:', error)
      showToast('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 'error')
    } finally {
      setActionLoading(null)
    }
  }

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const handlePageChange = (newPage) => {
    if (newPage >= 1 && newPage <= totalPages) {
      setCurrentPage(newPage)
      fetchUsers(newPage, searchTerm, roleFilter, statusFilter)
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
  const handleRefresh = () => {
    fetchUsers(currentPage, searchTerm, roleFilter, statusFilter)
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    if (!dateString) return '-'
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ä–æ–ª–∏
  const getRoleBadge = (role) => {
    const roleData = ROLES[role] || ROLES.client
    const IconComponent = roleData.icon
    
    return (
      <div 
        className={styles.roleBadge}
        style={{ backgroundColor: `${roleData.color}15`, color: roleData.color }}
      >
        <IconComponent size={14} />
        <span>{roleData.label}</span>
      </div>
    )
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const getStatusBadge = (isActive) => {
    return (
      <div 
        className={`${styles.statusBadge} ${isActive ? styles.active : styles.inactive}`}
      >
        {isActive ? <UserCheck size={14} /> : <UserX size={14} />}
        <span>{isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}</span>
      </div>
    )
  }

  return (
    <div className={styles.container}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className={styles.header}>
        <div className={styles.headerLeft}>
          <h1>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h1>
          <p>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <strong>{totalUsers}</strong></p>
        </div>
        <div className={styles.headerActions}>
          <button 
            className={styles.refreshButton}
            onClick={handleRefresh}
            disabled={loading}
          >
            <RefreshCw size={16} className={loading ? styles.spinning : ''} />
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
      </div>

      {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
      <div className={styles.searchSection}>
        <div className={styles.searchFiltersContainer}>
          <div className={styles.searchBox}>
            <Search size={20} />
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ email..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className={styles.searchInput}
            />
          </div>

          <div className={styles.filtersContainer}>
            <div className={styles.filterBox}>
              <Filter size={16} />
              <select
                value={roleFilter}
                onChange={(e) => setRoleFilter(e.target.value)}
                className={styles.filterSelect}
              >
                <option value="">–í—Å–µ —Ä–æ–ª–∏</option>
                <option value="client">–ö–ª–∏–µ–Ω—Ç—ã</option>
                <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</option>
                <option value="kitchen">–ö—É—Ö–Ω—è</option>
                <option value="courier">–ö—É—Ä—å–µ—Ä—ã</option>
              </select>
            </div>

            <div className={styles.filterBox}>
              <UserCheck size={16} />
              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                className={styles.filterSelect}
              >
                <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
                <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
              </select>
            </div>

            {hasActiveFilters && (
              <button 
                className={styles.resetButton}
                onClick={handleResetFilters}
                title="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
              >
                <X size={16} />
                –°–±—Ä–æ—Å–∏—Ç—å
              </button>
            )}
          </div>
        </div>

        {hasActiveFilters && (
          <div className={styles.activeFiltersInfo}>
            <span>–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã:</span>
            {searchTerm && <span className={styles.filterTag}>–ü–æ–∏—Å–∫: "{searchTerm}"</span>}
            {roleFilter && <span className={styles.filterTag}>–†–æ–ª—å: {ROLES[roleFilter]?.label}</span>}
            {statusFilter && <span className={styles.filterTag}>–°—Ç–∞—Ç—É—Å: {statusFilter === 'active' ? '–ê–∫—Ç–∏–≤–Ω—ã–µ' : '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ'}</span>}
          </div>
        )}
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
      <div className={styles.tableContainer}>
        {loading ? (
          <div className={styles.loadingContainer}>
            <div className={styles.loadingSpinner}></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</p>
          </div>
        ) : users.length === 0 ? (
          <div className={styles.emptyState}>
            <Users size={48} className={styles.emptyIcon} />
            <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
          </div>
        ) : (
          <>
            <table className={styles.table}>
              <thead>
                <tr>
                  <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
                  <th>–ö–æ–Ω—Ç–∞–∫—Ç—ã</th>
                  <th>–†–æ–ª—å</th>
                  <th>–°—Ç–∞—Ç—É—Å</th>
                  <th>–ó–∞–∫–∞–∑—ã</th>
                  <th>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</th>
                  <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
              </thead>
              <tbody>
                {users.map(user => (
                  <tr key={user.id} className={styles.tableRow}>
                    <td>
                      <div className={styles.userInfo}>
                        <div className={styles.userAvatar}>
                          <Users size={20} />
                        </div>
                        <div className={styles.userDetails}>
                          <div className={styles.userName}>{user.name}</div>
                          <div className={styles.userId}>ID: {user.id}</div>
                        </div>
                      </div>
                    </td>
                    <td>
                      <div className={styles.contactInfo}>
                        <div className={styles.contactItem}>
                          <Phone size={14} />
                          <span>{user.phone}</span>
                        </div>
                        {user.email && (
                          <div className={styles.contactItem}>
                            <Mail size={14} />
                            <span>{user.email}</span>
                          </div>
                        )}
                        {user.address && (
                          <div className={styles.contactItem}>
                            <MapPin size={14} />
                            <span>{user.address.substring(0, 30)}...</span>
                          </div>
                        )}
                      </div>
                    </td>
                    <td>{getRoleBadge(user.role)}</td>
                    <td>{getStatusBadge(user.is_active)}</td>
                    <td>
                      <div className={styles.ordersInfo}>
                        <div className={styles.ordersCount}>
                          <Package size={14} />
                          <span>{user.orders_count}</span>
                        </div>
                        {user.last_order_date && (
                          <div className={styles.lastOrder}>
                            –ü–æ—Å–ª–µ–¥–Ω–∏–π: {formatDate(user.last_order_date)}
                          </div>
                        )}
                      </div>
                    </td>
                    <td>
                      <div className={styles.registrationInfo}>
                        <Calendar size={14} />
                        <span>{formatDate(user.created_at)}</span>
                      </div>
                    </td>
                    <td>
                      <div className={styles.actions}>
                        <button
                          className={styles.actionButton}
                          onClick={() => {
                            setSelectedUser(user)
                            setShowRoleModal(true)
                          }}
                          title="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"
                        >
                          <Shield size={16} />
                        </button>
                        <button
                          className={styles.actionButton}
                          onClick={() => {
                            setSelectedUser(user)
                            setShowStatusModal(true)
                          }}
                          title="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
                        >
                          {user.is_active ? <UserX size={16} /> : <UserCheck size={16} />}
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
            {totalPages > 1 && (
              <div className={styles.pagination}>
                <button
                  className={styles.pageButton}
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                >
                  <ChevronLeft size={16} />
                  –ü—Ä–µ–¥—ã–¥—É—â–∞—è
                </button>
                
                <div className={styles.pageInfo}>
                  <span>
                    –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}
                  </span>
                  <span className={styles.totalInfo}>
                    ({((currentPage - 1) * perPage + 1)}-{Math.min(currentPage * perPage, totalUsers)} –∏–∑ {totalUsers})
                  </span>
                </div>
                
                <button
                  className={styles.pageButton}
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                >
                  –°–ª–µ–¥—É—é—â–∞—è
                  <ChevronRight size={16} />
                </button>
              </div>
            )}
          </>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–º–µ–Ω—ã —Ä–æ–ª–∏ */}
      {showRoleModal && selectedUser && (
        <ConfirmModal
          isOpen={showRoleModal}
          onClose={() => {
            setShowRoleModal(false)
            setSelectedUser(null)
          }}
          title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
          message={
            <div className={styles.roleChangeContent}>
              <p>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <strong>{selectedUser.name}</strong>:</p>
              <div className={styles.roleOptions}>
                {Object.entries(ROLES).map(([roleKey, roleData]) => {
                  const IconComponent = roleData.icon
                  return (
                    <button
                      key={roleKey}
                      className={`${styles.roleOption} ${
                        roleKey === selectedUser.role ? styles.currentRole : ''
                      }`}
                      onClick={() => handleRoleChange(roleKey)}
                      disabled={actionLoading === 'role' || roleKey === selectedUser.role}
                      style={{ borderColor: roleData.color }}
                    >
                      <IconComponent size={16} color={roleData.color} />
                      <span>{roleData.label}</span>
                      {roleKey === selectedUser.role && <span className={styles.currentBadge}>–¢–µ–∫—É—â–∞—è</span>}
                    </button>
                  )
                })}
              </div>
            </div>
          }
          showActions={false}
          isLoading={actionLoading === 'role'}
        />
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ */}
      {showStatusModal && selectedUser && (
        <ConfirmModal
          isOpen={showStatusModal}
          onClose={() => {
            setShowStatusModal(false)
            setSelectedUser(null)
          }}
          title={selectedUser.is_active ? '–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
          message={
            selectedUser.is_active
              ? `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${selectedUser.name}? –ü–æ—Å–ª–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.`
              : `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${selectedUser.name}?`
          }
          confirmText={selectedUser.is_active ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
          cancelText="–û—Ç–º–µ–Ω–∞"
          onConfirm={() => handleStatusChange(!selectedUser.is_active)}
          isLoading={actionLoading === 'status'}
          type={selectedUser.is_active ? 'danger' : 'success'}
        />
      )}

      {/* Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <Toast
        message={toast.message}
        type={toast.type}
        isVisible={toast.isVisible}
        onClose={hideToast}
      />
    </div>
  )
}

export default UsersTable