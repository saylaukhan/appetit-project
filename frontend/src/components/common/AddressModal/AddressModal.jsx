import React, { useState, useEffect, useCallback } from 'react'
import styles from './AddressModal.module.css'

// –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞ –±–µ–∑ API –∫–ª—é—á–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenStreetMap
const mapContainerStyle = {
  width: '100%',
  height: '300px',
  borderRadius: '8px',
  border: '1px solid #e0e0e0'
}

const defaultCenter = {
  lat: 49.948265,
  lng: 82.628062 // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫–∞
}

function AddressModal({ isOpen, onClose, onSave, initialAddress = null }) {
  const [formData, setFormData] = useState({
    city: '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫',
    street: '',
    fullAddress: '', // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    entrance: '',
    floor: '',
    apartment: '',
    comment: ''
  })
  
  const [mapCenter, setMapCenter] = useState(defaultCenter)
  const [markerPosition, setMarkerPosition] = useState(defaultCenter)
  const [isLoadingLocation, setIsLoadingLocation] = useState(false)

  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  useEffect(() => {
    if (initialAddress) {
      const fullAddr = initialAddress.address || `${initialAddress.address_city || '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫'}, ${initialAddress.address_street || ''}`
      setFormData({
        city: initialAddress.address_city || '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫',
        street: initialAddress.address_street || '',
        fullAddress: fullAddr,
        entrance: initialAddress.address_entrance || '',
        floor: initialAddress.address_floor || '',
        apartment: initialAddress.address_apartment || '',
        comment: initialAddress.address_comment || ''
      })
      
      if (initialAddress.address_latitude && initialAddress.address_longitude) {
        const position = {
          lat: initialAddress.address_latitude,
          lng: initialAddress.address_longitude
        }
        setMapCenter(position)
        setMarkerPosition(position)
      }
    } else {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
      setFormData(prev => ({
        ...prev,
        fullAddress: `${prev.city}, `
      }))
    }
  }, [initialAddress])

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  const getCurrentLocation = useCallback(() => {
    if (!navigator.geolocation) {
      alert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º')
      return
    }

    setIsLoadingLocation(true)
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude } = position.coords
        const newPosition = { lat: latitude, lng: longitude }
        
        setMapCenter(newPosition)
        setMarkerPosition(newPosition)
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        reverseGeocode(latitude, longitude)
        setIsLoadingLocation(false)
      },
      (error) => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error)
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')
        setIsLoadingLocation(false)
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 300000
      }
    )
  }, [])

  // –ü—Ä–æ—Å—Ç–æ–µ –æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Nominatim API (OpenStreetMap)
  const reverseGeocode = async (lat, lng) => {
    try {
      const response = await fetch(
        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&accept-language=ru`
      )
      
      if (response.ok) {
        const data = await response.json()
        if (data && data.address) {
          const address = data.address
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏ —É–ª–∏—Ü—É
          const city = address.city || address.town || address.village || '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫'
          const street = [
            address.house_number,
            address.road || address.street
          ].filter(Boolean).join(' ')
          
          setFormData(prev => ({
            ...prev,
            city: city,
            street: street || prev.street,
            fullAddress: `${city}, ${street || prev.street}`
          }))
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ - —Ç–µ–ø–µ—Ä—å –±–µ–∑ Google Maps API
  const handleMapClick = useCallback((lat, lng) => {
    setMarkerPosition({ lat, lng })
    reverseGeocode(lat, lng)
  }, [])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleInputChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
  const handleSave = () => {
    if (!formData.fullAddress.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å')
      return
    }

    // –†–∞–∑–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞ –≥–æ—Ä–æ–¥ –∏ —É–ª–∏—Ü—É –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    let city = '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫'
    let street = formData.fullAddress
    
    if (formData.fullAddress.includes(',')) {
      const parts = formData.fullAddress.split(',')
      city = parts[0].trim()
      street = parts.slice(1).join(',').trim()
    }

    const addressData = {
      address: formData.fullAddress,
      address_city: city,
      address_street: street,
      address_entrance: formData.entrance || null,
      address_floor: formData.floor || null,
      address_apartment: formData.apartment || null,
      address_comment: formData.comment || null,
      address_latitude: markerPosition.lat,
      address_longitude: markerPosition.lng
    }

    onSave(addressData)
  }

  if (!isOpen) return null

  return (
    <div className={styles.modalOverlay} onClick={onClose}>
      <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
        <div className={styles.modalHeader}>
          <h2>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å</h2>
          <button className={styles.closeBtn} onClick={onClose}>√ó</button>
        </div>

        <div className={styles.modalBody}>
          {/* –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏ –∫–∞—Ä—Ç–∞ */}
          <div className={styles.mapSection}>
            <div className={styles.locationControls}>
              <button 
                className={styles.locationBtn}
                onClick={getCurrentLocation}
                disabled={isLoadingLocation}
              >
                {isLoadingLocation ? '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...' : 'üìç –ú–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'}
              </button>
              <span className={styles.mapHint}>
                –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
              </span>
            </div>

            <div className={styles.mapContainer}>
              <iframe
                style={mapContainerStyle}
                src={`https://www.openstreetmap.org/export/embed.html?bbox=${markerPosition.lng-0.01},${markerPosition.lat-0.01},${markerPosition.lng+0.01},${markerPosition.lat+0.01}&layer=mapnik&marker=${markerPosition.lat},${markerPosition.lng}`}
                frameBorder="0"
                scrolling="no"
                title="–ö–∞—Ä—Ç–∞"
              ></iframe>

            </div>
          </div>

          {/* –§–æ—Ä–º–∞ –∞–¥—Ä–µ—Å–∞ */}
          <div className={styles.formSection}>
            <div className={styles.formGrid}>
              <div className={styles.formGroup}>
                <label>–ì–æ—Ä–æ–¥, —É–ª–∏—Ü–∞ –∏ –¥–æ–º*</label>
                <input
                  type="text"
                  name="fullAddress"
                  value={formData.fullAddress}
                  onChange={(e) => {
                    const value = e.target.value
                    setFormData(prev => ({
                      ...prev,
                      fullAddress: value
                    }))
                  }}
                  placeholder="–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫, —É–ª–∏—Ü–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, 62"
                  className={styles.addressInput}
                />
              </div>

              <div className={styles.formRow}>
                <div className={styles.formGroup}>
                  <label>–ü–æ–¥—ä–µ–∑–¥</label>
                  <input
                    type="text"
                    name="entrance"
                    value={formData.entrance}
                    onChange={handleInputChange}
                    placeholder="1"
                    className={styles.smallInput}
                  />
                </div>

                <div className={styles.formGroup}>
                  <label>–≠—Ç–∞–∂</label>
                  <input
                    type="text"
                    name="floor"
                    value={formData.floor}
                    onChange={handleInputChange}
                    placeholder="5"
                    className={styles.smallInput}
                  />
                </div>

                <div className={styles.formGroup}>
                  <label>–ö–≤–∞—Ä—Ç–∏—Ä–∞</label>
                  <input
                    type="text"
                    name="apartment"
                    value={formData.apartment}
                    onChange={handleInputChange}
                    placeholder="25"
                    className={styles.smallInput}
                  />
                </div>
              </div>

              <div className={styles.formGroup}>
                <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–¥—Ä–µ—Å—É</label>
                <textarea
                  name="comment"
                  value={formData.comment}
                  onChange={handleInputChange}
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫—É—Ä—å–µ—Ä–∞"
                  className={styles.commentInput}
                  rows="3"
                />
              </div>
            </div>
          </div>
        </div>

        <div className={styles.modalFooter}>
          <button className={styles.saveBtn} onClick={handleSave}>
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å
          </button>
        </div>
      </div>
    </div>
  )
}

export default AddressModal
