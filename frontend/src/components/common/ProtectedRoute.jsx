import React from 'react'
import { Navigate, useLocation } from 'react-router-dom'
import { useAuth } from '../../contexts/AuthContext'
import LoadingSpinner from './LoadingSpinner'
import styles from './ProtectedRoute.module.css'

function ProtectedRoute({ children, roles = [], redirectTo = '/login' }) {
  const { isAuthenticated, user, loading } = useAuth()
  const location = useLocation()

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  if (loading) {
    return <LoadingSpinner fullScreen text="–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø..." />
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
  if (!isAuthenticated) {
    return <Navigate to={redirectTo} state={{ from: location }} replace />
  }

  // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Ä–æ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  if (roles.length > 0) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–∞—è —Ä–æ–ª—å
    const userRole = user?.role?.toLowerCase()
    const allowedRoles = roles.map(role => role.toLowerCase())
    
    if (!userRole || !allowedRoles.includes(userRole)) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      return <AccessDenied userRole={userRole} requiredRoles={allowedRoles} />
    }
  }

  return children
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–æ–ª–∏
function getDefaultRouteForRole(role) {
  switch (role) {
    case 'admin':
      return '/admin'
    case 'kitchen':
      return '/kitchen'
    case 'courier':
      return '/courier'
    case 'client':
      return '/'
    default:
      return '/'
  }
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤–∞—Ö
export function AccessDenied({ userRole, requiredRoles }) {
  const { logout } = useAuth()
  
  return (
    <div className={styles.accessDenied}>
      <div className={styles.accessDeniedCard}>
        <div className={styles.icon}>üîí</div>
        <h2>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h2>
        <p>
          –í–∞—à–∞ —Ä–æ–ª—å: <strong>{getRoleDisplayName(userRole)}</strong>
        </p>
        <p>
          –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: <strong>{requiredRoles.map(getRoleDisplayName).join(', ')}</strong>
        </p>
        <div className={styles.actions}>
          <button 
            onClick={() => window.history.back()}
            className={styles.backButton}
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
          <button 
            onClick={logout}
            className={styles.logoutButton}
          >
            –°–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          </button>
        </div>
      </div>
    </div>
  )
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —Ä–æ–ª–∏
function getRoleDisplayName(role) {
  switch (role?.toLowerCase()) {
    case 'admin':
      return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    case 'kitchen':
      return '–ö—É—Ö–Ω—è'
    case 'courier':
      return '–ö—É—Ä—å–µ—Ä'
    case 'client':
      return '–ö–ª–∏–µ–Ω—Ç'
    default:
      return role || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  }
}

// –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function useRole() {
  const { user } = useAuth()
  
  const hasRole = (role) => {
    return user?.role?.toLowerCase() === role.toLowerCase()
  }
  
  const hasAnyRole = (roles) => {
    return roles.some(role => hasRole(role))
  }
  
  const isAdmin = () => hasRole('admin')
  const isKitchen = () => hasRole('kitchen')
  const isCourier = () => hasRole('courier')
  const isClient = () => hasRole('client')
  
  return {
    userRole: user?.role?.toLowerCase(),
    hasRole,
    hasAnyRole,
    isAdmin,
    isKitchen,
    isCourier,
    isClient
  }
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
export function RoleGuard({ roles, children, fallback = null, show = true }) {
  const { hasAnyRole } = useRole()
  
  if (!roles || roles.length === 0) {
    return show ? children : fallback
  }
  
  const hasAccess = hasAnyRole(roles)
  
  if (show) {
    return hasAccess ? children : fallback
  } else {
    return hasAccess ? fallback : children
  }
}

export default ProtectedRoute