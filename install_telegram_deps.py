#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, cwd=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            check=True, 
            capture_output=True, 
            text=True,
            cwd=cwd
        )
        return True, result.stdout
    except subprocess.CalledProcessError as e:
        return False, e.stderr

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("=" * 60)
    
    project_root = Path(__file__).parent
    backend_path = project_root / "backend"
    frontend_path = project_root / "frontend"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    if not backend_path.exists():
        print("‚ùå –ü–∞–ø–∫–∞ backend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        sys.exit(1)
    
    if not frontend_path.exists():
        print("‚ùå –ü–∞–ø–∫–∞ frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        sys.exit(1)
    
    print("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ ‚úì")
    
    # Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt
    requirements_file = backend_path / "requirements.txt"
    if not requirements_file.exists():
        print("‚ùå –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    success, output = run_command("pip install -r requirements.txt", cwd=backend_path)
    if success:
        print("‚úÖ Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {output}")
        sys.exit(1)
    
    # Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
    package_json = frontend_path / "package.json"
    if package_json.exists():
        success, output = run_command("npm install", cwd=frontend_path)
        if success:
            print("‚úÖ Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {output}")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å 'npm install' –≤—Ä—É—á–Ω—É—é –≤ –ø–∞–ø–∫–µ frontend")
    else:
        print("‚ö†Ô∏è  package.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    print("\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    env_file = backend_path / ".env"
    env_example = backend_path / ".env.example"
    
    if not env_file.exists() and env_example.exists():
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ .env.example...")
        with open(env_example, 'r', encoding='utf-8') as f:
            content = f.read()
        
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω")
        print("‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ!")
    elif env_file.exists():
        print("‚úÖ –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print("‚ö†Ô∏è  .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π
    print("\nüóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    alembic_ini = backend_path / "alembic.ini"
    if alembic_ini.exists():
        print("üìã –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        success, output = run_command("alembic upgrade head", cwd=backend_path)
        if success:
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        else:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {output}")
            print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é")
    else:
        print("‚ö†Ô∏è  alembic.ini –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print("\nüéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram API –≤ backend/.env:")
    print("   - TELEGRAM_API_ID=your_api_id")
    print("   - TELEGRAM_API_HASH=your_api_hash")
    print("   - TELEGRAM_ENABLED=true")
    print("\n2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä:")
    print("   cd backend && python main.py")
    print("\n3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend:")
    print("   cd frontend && npm start")
    print("\n4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:")
    print("   cd backend && python test_telegram_auth.py")
    print("\nüìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: TELEGRAM_AUTH_SETUP.md")

if __name__ == "__main__":
    main()